// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BluetoothChannel.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_BluetoothChannel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_BluetoothChannel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_BluetoothChannel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_BluetoothChannel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_BluetoothChannel_2eproto;
namespace tag {
namespace aas {
class BluetoothChannel;
class BluetoothChannelDefaultTypeInternal;
extern BluetoothChannelDefaultTypeInternal _BluetoothChannel_default_instance_;
class BluetoothProfile;
class BluetoothProfileDefaultTypeInternal;
extern BluetoothProfileDefaultTypeInternal _BluetoothProfile_default_instance_;
}  // namespace aas
}  // namespace tag
PROTOBUF_NAMESPACE_OPEN
template<> ::tag::aas::BluetoothChannel* Arena::CreateMaybeMessage<::tag::aas::BluetoothChannel>(Arena*);
template<> ::tag::aas::BluetoothProfile* Arena::CreateMaybeMessage<::tag::aas::BluetoothProfile>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tag {
namespace aas {

enum BluetoothProfile_Enum : int {
  BluetoothProfile_Enum_NONE = 0,
  BluetoothProfile_Enum_UNK_1 = 1,
  BluetoothProfile_Enum_A2DP = 2,
  BluetoothProfile_Enum_UNK_3 = 3,
  BluetoothProfile_Enum_HFP = 4
};
bool BluetoothProfile_Enum_IsValid(int value);
constexpr BluetoothProfile_Enum BluetoothProfile_Enum_Enum_MIN = BluetoothProfile_Enum_NONE;
constexpr BluetoothProfile_Enum BluetoothProfile_Enum_Enum_MAX = BluetoothProfile_Enum_HFP;
constexpr int BluetoothProfile_Enum_Enum_ARRAYSIZE = BluetoothProfile_Enum_Enum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BluetoothProfile_Enum_descriptor();
template<typename T>
inline const std::string& BluetoothProfile_Enum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BluetoothProfile_Enum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BluetoothProfile_Enum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BluetoothProfile_Enum_descriptor(), enum_t_value);
}
inline bool BluetoothProfile_Enum_Parse(
    const std::string& name, BluetoothProfile_Enum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BluetoothProfile_Enum>(
    BluetoothProfile_Enum_descriptor(), name, value);
}
// ===================================================================

class BluetoothProfile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tag.aas.BluetoothProfile) */ {
 public:
  inline BluetoothProfile() : BluetoothProfile(nullptr) {};
  virtual ~BluetoothProfile();

  BluetoothProfile(const BluetoothProfile& from);
  BluetoothProfile(BluetoothProfile&& from) noexcept
    : BluetoothProfile() {
    *this = ::std::move(from);
  }

  inline BluetoothProfile& operator=(const BluetoothProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline BluetoothProfile& operator=(BluetoothProfile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BluetoothProfile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BluetoothProfile* internal_default_instance() {
    return reinterpret_cast<const BluetoothProfile*>(
               &_BluetoothProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BluetoothProfile& a, BluetoothProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(BluetoothProfile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BluetoothProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BluetoothProfile* New() const final {
    return CreateMaybeMessage<BluetoothProfile>(nullptr);
  }

  BluetoothProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BluetoothProfile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BluetoothProfile& from);
  void MergeFrom(const BluetoothProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BluetoothProfile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tag.aas.BluetoothProfile";
  }
  protected:
  explicit BluetoothProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BluetoothChannel_2eproto);
    return ::descriptor_table_BluetoothChannel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BluetoothProfile_Enum Enum;
  static constexpr Enum NONE =
    BluetoothProfile_Enum_NONE;
  static constexpr Enum UNK_1 =
    BluetoothProfile_Enum_UNK_1;
  static constexpr Enum A2DP =
    BluetoothProfile_Enum_A2DP;
  static constexpr Enum UNK_3 =
    BluetoothProfile_Enum_UNK_3;
  static constexpr Enum HFP =
    BluetoothProfile_Enum_HFP;
  static inline bool Enum_IsValid(int value) {
    return BluetoothProfile_Enum_IsValid(value);
  }
  static constexpr Enum Enum_MIN =
    BluetoothProfile_Enum_Enum_MIN;
  static constexpr Enum Enum_MAX =
    BluetoothProfile_Enum_Enum_MAX;
  static constexpr int Enum_ARRAYSIZE =
    BluetoothProfile_Enum_Enum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Enum_descriptor() {
    return BluetoothProfile_Enum_descriptor();
  }
  template<typename T>
  static inline const std::string& Enum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Enum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Enum_Name.");
    return BluetoothProfile_Enum_Name(enum_t_value);
  }
  static inline bool Enum_Parse(const std::string& name,
      Enum* value) {
    return BluetoothProfile_Enum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tag.aas.BluetoothProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BluetoothChannel_2eproto;
};
// -------------------------------------------------------------------

class BluetoothChannel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tag.aas.BluetoothChannel) */ {
 public:
  inline BluetoothChannel() : BluetoothChannel(nullptr) {};
  virtual ~BluetoothChannel();

  BluetoothChannel(const BluetoothChannel& from);
  BluetoothChannel(BluetoothChannel&& from) noexcept
    : BluetoothChannel() {
    *this = ::std::move(from);
  }

  inline BluetoothChannel& operator=(const BluetoothChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline BluetoothChannel& operator=(BluetoothChannel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BluetoothChannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BluetoothChannel* internal_default_instance() {
    return reinterpret_cast<const BluetoothChannel*>(
               &_BluetoothChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BluetoothChannel& a, BluetoothChannel& b) {
    a.Swap(&b);
  }
  inline void Swap(BluetoothChannel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BluetoothChannel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BluetoothChannel* New() const final {
    return CreateMaybeMessage<BluetoothChannel>(nullptr);
  }

  BluetoothChannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BluetoothChannel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BluetoothChannel& from);
  void MergeFrom(const BluetoothChannel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BluetoothChannel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tag.aas.BluetoothChannel";
  }
  protected:
  explicit BluetoothChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BluetoothChannel_2eproto);
    return ::descriptor_table_BluetoothChannel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvailableProfilesFieldNumber = 2,
    kAdapterAddressFieldNumber = 1,
  };
  // repeated .tag.aas.BluetoothProfile.Enum available_profiles = 2;
  int available_profiles_size() const;
  private:
  int _internal_available_profiles_size() const;
  public:
  void clear_available_profiles();
  private:
  ::tag::aas::BluetoothProfile_Enum _internal_available_profiles(int index) const;
  void _internal_add_available_profiles(::tag::aas::BluetoothProfile_Enum value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_available_profiles();
  public:
  ::tag::aas::BluetoothProfile_Enum available_profiles(int index) const;
  void set_available_profiles(int index, ::tag::aas::BluetoothProfile_Enum value);
  void add_available_profiles(::tag::aas::BluetoothProfile_Enum value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& available_profiles() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_available_profiles();

  // required string adapter_address = 1;
  bool has_adapter_address() const;
  private:
  bool _internal_has_adapter_address() const;
  public:
  void clear_adapter_address();
  const std::string& adapter_address() const;
  void set_adapter_address(const std::string& value);
  void set_adapter_address(std::string&& value);
  void set_adapter_address(const char* value);
  void set_adapter_address(const char* value, size_t size);
  std::string* mutable_adapter_address();
  std::string* release_adapter_address();
  void set_allocated_adapter_address(std::string* adapter_address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_adapter_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_adapter_address(
      std::string* adapter_address);
  private:
  const std::string& _internal_adapter_address() const;
  void _internal_set_adapter_address(const std::string& value);
  std::string* _internal_mutable_adapter_address();
  public:

  // @@protoc_insertion_point(class_scope:tag.aas.BluetoothChannel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> available_profiles_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr adapter_address_;
  friend struct ::TableStruct_BluetoothChannel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BluetoothProfile

// -------------------------------------------------------------------

// BluetoothChannel

// required string adapter_address = 1;
inline bool BluetoothChannel::_internal_has_adapter_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BluetoothChannel::has_adapter_address() const {
  return _internal_has_adapter_address();
}
inline void BluetoothChannel::clear_adapter_address() {
  adapter_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BluetoothChannel::adapter_address() const {
  // @@protoc_insertion_point(field_get:tag.aas.BluetoothChannel.adapter_address)
  return _internal_adapter_address();
}
inline void BluetoothChannel::set_adapter_address(const std::string& value) {
  _internal_set_adapter_address(value);
  // @@protoc_insertion_point(field_set:tag.aas.BluetoothChannel.adapter_address)
}
inline std::string* BluetoothChannel::mutable_adapter_address() {
  // @@protoc_insertion_point(field_mutable:tag.aas.BluetoothChannel.adapter_address)
  return _internal_mutable_adapter_address();
}
inline const std::string& BluetoothChannel::_internal_adapter_address() const {
  return adapter_address_.Get();
}
inline void BluetoothChannel::_internal_set_adapter_address(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  adapter_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BluetoothChannel::set_adapter_address(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  adapter_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tag.aas.BluetoothChannel.adapter_address)
}
inline void BluetoothChannel::set_adapter_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  adapter_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tag.aas.BluetoothChannel.adapter_address)
}
inline void BluetoothChannel::set_adapter_address(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  adapter_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tag.aas.BluetoothChannel.adapter_address)
}
inline std::string* BluetoothChannel::_internal_mutable_adapter_address() {
  _has_bits_[0] |= 0x00000001u;
  return adapter_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BluetoothChannel::release_adapter_address() {
  // @@protoc_insertion_point(field_release:tag.aas.BluetoothChannel.adapter_address)
  if (!_internal_has_adapter_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return adapter_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BluetoothChannel::set_allocated_adapter_address(std::string* adapter_address) {
  if (adapter_address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  adapter_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), adapter_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tag.aas.BluetoothChannel.adapter_address)
}
inline std::string* BluetoothChannel::unsafe_arena_release_adapter_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tag.aas.BluetoothChannel.adapter_address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return adapter_address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BluetoothChannel::unsafe_arena_set_allocated_adapter_address(
    std::string* adapter_address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (adapter_address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  adapter_address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      adapter_address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tag.aas.BluetoothChannel.adapter_address)
}

// repeated .tag.aas.BluetoothProfile.Enum available_profiles = 2;
inline int BluetoothChannel::_internal_available_profiles_size() const {
  return available_profiles_.size();
}
inline int BluetoothChannel::available_profiles_size() const {
  return _internal_available_profiles_size();
}
inline void BluetoothChannel::clear_available_profiles() {
  available_profiles_.Clear();
}
inline ::tag::aas::BluetoothProfile_Enum BluetoothChannel::_internal_available_profiles(int index) const {
  return static_cast< ::tag::aas::BluetoothProfile_Enum >(available_profiles_.Get(index));
}
inline ::tag::aas::BluetoothProfile_Enum BluetoothChannel::available_profiles(int index) const {
  // @@protoc_insertion_point(field_get:tag.aas.BluetoothChannel.available_profiles)
  return _internal_available_profiles(index);
}
inline void BluetoothChannel::set_available_profiles(int index, ::tag::aas::BluetoothProfile_Enum value) {
  assert(::tag::aas::BluetoothProfile_Enum_IsValid(value));
  available_profiles_.Set(index, value);
  // @@protoc_insertion_point(field_set:tag.aas.BluetoothChannel.available_profiles)
}
inline void BluetoothChannel::_internal_add_available_profiles(::tag::aas::BluetoothProfile_Enum value) {
  assert(::tag::aas::BluetoothProfile_Enum_IsValid(value));
  available_profiles_.Add(value);
}
inline void BluetoothChannel::add_available_profiles(::tag::aas::BluetoothProfile_Enum value) {
  // @@protoc_insertion_point(field_add:tag.aas.BluetoothChannel.available_profiles)
  _internal_add_available_profiles(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
BluetoothChannel::available_profiles() const {
  // @@protoc_insertion_point(field_list:tag.aas.BluetoothChannel.available_profiles)
  return available_profiles_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
BluetoothChannel::_internal_mutable_available_profiles() {
  return &available_profiles_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
BluetoothChannel::mutable_available_profiles() {
  // @@protoc_insertion_point(field_mutable_list:tag.aas.BluetoothChannel.available_profiles)
  return _internal_mutable_available_profiles();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace aas
}  // namespace tag

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tag::aas::BluetoothProfile_Enum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tag::aas::BluetoothProfile_Enum>() {
  return ::tag::aas::BluetoothProfile_Enum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_BluetoothChannel_2eproto
