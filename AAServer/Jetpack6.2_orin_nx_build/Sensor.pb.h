// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Sensor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Sensor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Sensor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Sensor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Sensor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Sensor_2eproto;
namespace tag {
namespace aas {
class Sensor;
class SensorDefaultTypeInternal;
extern SensorDefaultTypeInternal _Sensor_default_instance_;
class SensorType;
class SensorTypeDefaultTypeInternal;
extern SensorTypeDefaultTypeInternal _SensorType_default_instance_;
}  // namespace aas
}  // namespace tag
PROTOBUF_NAMESPACE_OPEN
template<> ::tag::aas::Sensor* Arena::CreateMaybeMessage<::tag::aas::Sensor>(Arena*);
template<> ::tag::aas::SensorType* Arena::CreateMaybeMessage<::tag::aas::SensorType>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tag {
namespace aas {

enum SensorType_Enum : int {
  SensorType_Enum_None = 0,
  SensorType_Enum_Location = 1,
  SensorType_Enum_Compass = 2,
  SensorType_Enum_CarSpeed = 3,
  SensorType_Enum_Rpm = 4,
  SensorType_Enum_Odometer = 5,
  SensorType_Enum_FuelLevel = 6,
  SensorType_Enum_ParkingBrake = 7,
  SensorType_Enum_Gear = 8,
  SensorType_Enum_Diagnostics = 9,
  SensorType_Enum_NightData = 10,
  SensorType_Enum_Environment = 11,
  SensorType_Enum_HVAC = 12,
  SensorType_Enum_DrivingStatus = 13,
  SensorType_Enum_DeadReconing = 14,
  SensorType_Enum_Passenger = 15,
  SensorType_Enum_Door = 16,
  SensorType_Enum_Light = 17,
  SensorType_Enum_Tire = 18,
  SensorType_Enum_Accel = 19,
  SensorType_Enum_Gyro = 20,
  SensorType_Enum_GPS = 21
};
bool SensorType_Enum_IsValid(int value);
constexpr SensorType_Enum SensorType_Enum_Enum_MIN = SensorType_Enum_None;
constexpr SensorType_Enum SensorType_Enum_Enum_MAX = SensorType_Enum_GPS;
constexpr int SensorType_Enum_Enum_ARRAYSIZE = SensorType_Enum_Enum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorType_Enum_descriptor();
template<typename T>
inline const std::string& SensorType_Enum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SensorType_Enum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SensorType_Enum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SensorType_Enum_descriptor(), enum_t_value);
}
inline bool SensorType_Enum_Parse(
    const std::string& name, SensorType_Enum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SensorType_Enum>(
    SensorType_Enum_descriptor(), name, value);
}
// ===================================================================

class SensorType PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tag.aas.SensorType) */ {
 public:
  inline SensorType() : SensorType(nullptr) {};
  virtual ~SensorType();

  SensorType(const SensorType& from);
  SensorType(SensorType&& from) noexcept
    : SensorType() {
    *this = ::std::move(from);
  }

  inline SensorType& operator=(const SensorType& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorType& operator=(SensorType&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorType* internal_default_instance() {
    return reinterpret_cast<const SensorType*>(
               &_SensorType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SensorType& a, SensorType& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorType* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SensorType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorType* New() const final {
    return CreateMaybeMessage<SensorType>(nullptr);
  }

  SensorType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorType& from);
  void MergeFrom(const SensorType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tag.aas.SensorType";
  }
  protected:
  explicit SensorType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Sensor_2eproto);
    return ::descriptor_table_Sensor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SensorType_Enum Enum;
  static constexpr Enum None =
    SensorType_Enum_None;
  static constexpr Enum Location =
    SensorType_Enum_Location;
  static constexpr Enum Compass =
    SensorType_Enum_Compass;
  static constexpr Enum CarSpeed =
    SensorType_Enum_CarSpeed;
  static constexpr Enum Rpm =
    SensorType_Enum_Rpm;
  static constexpr Enum Odometer =
    SensorType_Enum_Odometer;
  static constexpr Enum FuelLevel =
    SensorType_Enum_FuelLevel;
  static constexpr Enum ParkingBrake =
    SensorType_Enum_ParkingBrake;
  static constexpr Enum Gear =
    SensorType_Enum_Gear;
  static constexpr Enum Diagnostics =
    SensorType_Enum_Diagnostics;
  static constexpr Enum NightData =
    SensorType_Enum_NightData;
  static constexpr Enum Environment =
    SensorType_Enum_Environment;
  static constexpr Enum HVAC =
    SensorType_Enum_HVAC;
  static constexpr Enum DrivingStatus =
    SensorType_Enum_DrivingStatus;
  static constexpr Enum DeadReconing =
    SensorType_Enum_DeadReconing;
  static constexpr Enum Passenger =
    SensorType_Enum_Passenger;
  static constexpr Enum Door =
    SensorType_Enum_Door;
  static constexpr Enum Light =
    SensorType_Enum_Light;
  static constexpr Enum Tire =
    SensorType_Enum_Tire;
  static constexpr Enum Accel =
    SensorType_Enum_Accel;
  static constexpr Enum Gyro =
    SensorType_Enum_Gyro;
  static constexpr Enum GPS =
    SensorType_Enum_GPS;
  static inline bool Enum_IsValid(int value) {
    return SensorType_Enum_IsValid(value);
  }
  static constexpr Enum Enum_MIN =
    SensorType_Enum_Enum_MIN;
  static constexpr Enum Enum_MAX =
    SensorType_Enum_Enum_MAX;
  static constexpr int Enum_ARRAYSIZE =
    SensorType_Enum_Enum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Enum_descriptor() {
    return SensorType_Enum_descriptor();
  }
  template<typename T>
  static inline const std::string& Enum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Enum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Enum_Name.");
    return SensorType_Enum_Name(enum_t_value);
  }
  static inline bool Enum_Parse(const std::string& name,
      Enum* value) {
    return SensorType_Enum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tag.aas.SensorType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sensor_2eproto;
};
// -------------------------------------------------------------------

class Sensor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tag.aas.Sensor) */ {
 public:
  inline Sensor() : Sensor(nullptr) {};
  virtual ~Sensor();

  Sensor(const Sensor& from);
  Sensor(Sensor&& from) noexcept
    : Sensor() {
    *this = ::std::move(from);
  }

  inline Sensor& operator=(const Sensor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sensor& operator=(Sensor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Sensor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sensor* internal_default_instance() {
    return reinterpret_cast<const Sensor*>(
               &_Sensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Sensor& a, Sensor& b) {
    a.Swap(&b);
  }
  inline void Swap(Sensor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sensor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sensor* New() const final {
    return CreateMaybeMessage<Sensor>(nullptr);
  }

  Sensor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sensor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Sensor& from);
  void MergeFrom(const Sensor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sensor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tag.aas.Sensor";
  }
  protected:
  explicit Sensor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Sensor_2eproto);
    return ::descriptor_table_Sensor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // required .tag.aas.SensorType.Enum type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::tag::aas::SensorType_Enum type() const;
  void set_type(::tag::aas::SensorType_Enum value);
  private:
  ::tag::aas::SensorType_Enum _internal_type() const;
  void _internal_set_type(::tag::aas::SensorType_Enum value);
  public:

  // @@protoc_insertion_point(class_scope:tag.aas.Sensor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int type_;
  friend struct ::TableStruct_Sensor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SensorType

// -------------------------------------------------------------------

// Sensor

// required .tag.aas.SensorType.Enum type = 1;
inline bool Sensor::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Sensor::has_type() const {
  return _internal_has_type();
}
inline void Sensor::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::tag::aas::SensorType_Enum Sensor::_internal_type() const {
  return static_cast< ::tag::aas::SensorType_Enum >(type_);
}
inline ::tag::aas::SensorType_Enum Sensor::type() const {
  // @@protoc_insertion_point(field_get:tag.aas.Sensor.type)
  return _internal_type();
}
inline void Sensor::_internal_set_type(::tag::aas::SensorType_Enum value) {
  assert(::tag::aas::SensorType_Enum_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void Sensor::set_type(::tag::aas::SensorType_Enum value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:tag.aas.Sensor.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace aas
}  // namespace tag

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tag::aas::SensorType_Enum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tag::aas::SensorType_Enum>() {
  return ::tag::aas::SensorType_Enum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Sensor_2eproto
