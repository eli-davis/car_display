// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: InputChannel.proto

#include "InputChannel.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_TouchConfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TouchConfig_TouchConfig_2eproto;
namespace tag {
namespace aas {
class InputChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputChannel> _instance;
} _InputChannel_default_instance_;
class InputChannelHandshakeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputChannelHandshakeRequest> _instance;
} _InputChannelHandshakeRequest_default_instance_;
}  // namespace aas
}  // namespace tag
static void InitDefaultsscc_info_InputChannel_InputChannel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tag::aas::_InputChannel_default_instance_;
    new (ptr) ::tag::aas::InputChannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tag::aas::InputChannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InputChannel_InputChannel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InputChannel_InputChannel_2eproto}, {
      &scc_info_TouchConfig_TouchConfig_2eproto.base,}};

static void InitDefaultsscc_info_InputChannelHandshakeRequest_InputChannel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tag::aas::_InputChannelHandshakeRequest_default_instance_;
    new (ptr) ::tag::aas::InputChannelHandshakeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tag::aas::InputChannelHandshakeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputChannelHandshakeRequest_InputChannel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InputChannelHandshakeRequest_InputChannel_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_InputChannel_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_InputChannel_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_InputChannel_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_InputChannel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::tag::aas::InputChannel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tag::aas::InputChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tag::aas::InputChannel, available_buttons_),
  PROTOBUF_FIELD_OFFSET(::tag::aas::InputChannel, screen_config_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tag::aas::InputChannelHandshakeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tag::aas::InputChannelHandshakeRequest, available_buttons_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::tag::aas::InputChannel)},
  { 9, -1, sizeof(::tag::aas::InputChannelHandshakeRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tag::aas::_InputChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tag::aas::_InputChannelHandshakeRequest_default_instance_),
};

const char descriptor_table_protodef_InputChannel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022InputChannel.proto\022\007tag.aas\032\021TouchConf"
  "ig.proto\032\022ButtonsEvent.proto\"p\n\014InputCha"
  "nnel\0223\n\021available_buttons\030\001 \003(\0162\030.tag.aa"
  "s.ButtonCode.Enum\022+\n\rscreen_config\030\002 \001(\013"
  "2\024.tag.aas.TouchConfig\"S\n\034InputChannelHa"
  "ndshakeRequest\0223\n\021available_buttons\030\001 \003("
  "\0162\030.tag.aas.ButtonCode.Enum"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_InputChannel_2eproto_deps[2] = {
  &::descriptor_table_ButtonsEvent_2eproto,
  &::descriptor_table_TouchConfig_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_InputChannel_2eproto_sccs[2] = {
  &scc_info_InputChannel_InputChannel_2eproto.base,
  &scc_info_InputChannelHandshakeRequest_InputChannel_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_InputChannel_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_InputChannel_2eproto = {
  false, false, descriptor_table_protodef_InputChannel_2eproto, "InputChannel.proto", 267,
  &descriptor_table_InputChannel_2eproto_once, descriptor_table_InputChannel_2eproto_sccs, descriptor_table_InputChannel_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_InputChannel_2eproto::offsets,
  file_level_metadata_InputChannel_2eproto, 2, file_level_enum_descriptors_InputChannel_2eproto, file_level_service_descriptors_InputChannel_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_InputChannel_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_InputChannel_2eproto)), true);
namespace tag {
namespace aas {

// ===================================================================

void InputChannel::InitAsDefaultInstance() {
  ::tag::aas::_InputChannel_default_instance_._instance.get_mutable()->screen_config_ = const_cast< ::tag::aas::TouchConfig*>(
      ::tag::aas::TouchConfig::internal_default_instance());
}
class InputChannel::_Internal {
 public:
  using HasBits = decltype(std::declval<InputChannel>()._has_bits_);
  static const ::tag::aas::TouchConfig& screen_config(const InputChannel* msg);
  static void set_has_screen_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::tag::aas::TouchConfig&
InputChannel::_Internal::screen_config(const InputChannel* msg) {
  return *msg->screen_config_;
}
void InputChannel::clear_screen_config() {
  if (screen_config_ != nullptr) screen_config_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
InputChannel::InputChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  available_buttons_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tag.aas.InputChannel)
}
InputChannel::InputChannel(const InputChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      available_buttons_(from.available_buttons_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_screen_config()) {
    screen_config_ = new ::tag::aas::TouchConfig(*from.screen_config_);
  } else {
    screen_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tag.aas.InputChannel)
}

void InputChannel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputChannel_InputChannel_2eproto.base);
  screen_config_ = nullptr;
}

InputChannel::~InputChannel() {
  // @@protoc_insertion_point(destructor:tag.aas.InputChannel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InputChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete screen_config_;
}

void InputChannel::ArenaDtor(void* object) {
  InputChannel* _this = reinterpret_cast< InputChannel* >(object);
  (void)_this;
}
void InputChannel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InputChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputChannel& InputChannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputChannel_InputChannel_2eproto.base);
  return *internal_default_instance();
}


void InputChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:tag.aas.InputChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  available_buttons_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(screen_config_ != nullptr);
    screen_config_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tag.aas.ButtonCode.Enum available_buttons = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::tag::aas::ButtonCode_Enum_IsValid(val))) {
              _internal_add_available_buttons(static_cast<::tag::aas::ButtonCode_Enum>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_available_buttons(), ptr, ctx, ::tag::aas::ButtonCode_Enum_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tag.aas.TouchConfig screen_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_screen_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tag.aas.InputChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tag.aas.ButtonCode.Enum available_buttons = 1;
  for (int i = 0, n = this->_internal_available_buttons_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        1, this->_internal_available_buttons(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .tag.aas.TouchConfig screen_config = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::screen_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tag.aas.InputChannel)
  return target;
}

size_t InputChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tag.aas.InputChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tag.aas.ButtonCode.Enum available_buttons = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_available_buttons_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_available_buttons(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // optional .tag.aas.TouchConfig screen_config = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *screen_config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tag.aas.InputChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const InputChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tag.aas.InputChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tag.aas.InputChannel)
    MergeFrom(*source);
  }
}

void InputChannel::MergeFrom(const InputChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tag.aas.InputChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  available_buttons_.MergeFrom(from.available_buttons_);
  if (from._internal_has_screen_config()) {
    _internal_mutable_screen_config()->::tag::aas::TouchConfig::MergeFrom(from._internal_screen_config());
  }
}

void InputChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tag.aas.InputChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputChannel::CopyFrom(const InputChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tag.aas.InputChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputChannel::IsInitialized() const {
  if (_internal_has_screen_config()) {
    if (!screen_config_->IsInitialized()) return false;
  }
  return true;
}

void InputChannel::InternalSwap(InputChannel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  available_buttons_.InternalSwap(&other->available_buttons_);
  swap(screen_config_, other->screen_config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InputChannelHandshakeRequest::InitAsDefaultInstance() {
}
class InputChannelHandshakeRequest::_Internal {
 public:
};

InputChannelHandshakeRequest::InputChannelHandshakeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  available_buttons_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tag.aas.InputChannelHandshakeRequest)
}
InputChannelHandshakeRequest::InputChannelHandshakeRequest(const InputChannelHandshakeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      available_buttons_(from.available_buttons_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tag.aas.InputChannelHandshakeRequest)
}

void InputChannelHandshakeRequest::SharedCtor() {
}

InputChannelHandshakeRequest::~InputChannelHandshakeRequest() {
  // @@protoc_insertion_point(destructor:tag.aas.InputChannelHandshakeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InputChannelHandshakeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InputChannelHandshakeRequest::ArenaDtor(void* object) {
  InputChannelHandshakeRequest* _this = reinterpret_cast< InputChannelHandshakeRequest* >(object);
  (void)_this;
}
void InputChannelHandshakeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InputChannelHandshakeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputChannelHandshakeRequest& InputChannelHandshakeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputChannelHandshakeRequest_InputChannel_2eproto.base);
  return *internal_default_instance();
}


void InputChannelHandshakeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tag.aas.InputChannelHandshakeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  available_buttons_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputChannelHandshakeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tag.aas.ButtonCode.Enum available_buttons = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::tag::aas::ButtonCode_Enum_IsValid(val))) {
              _internal_add_available_buttons(static_cast<::tag::aas::ButtonCode_Enum>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_available_buttons(), ptr, ctx, ::tag::aas::ButtonCode_Enum_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputChannelHandshakeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tag.aas.InputChannelHandshakeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tag.aas.ButtonCode.Enum available_buttons = 1;
  for (int i = 0, n = this->_internal_available_buttons_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        1, this->_internal_available_buttons(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tag.aas.InputChannelHandshakeRequest)
  return target;
}

size_t InputChannelHandshakeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tag.aas.InputChannelHandshakeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tag.aas.ButtonCode.Enum available_buttons = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_available_buttons_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_available_buttons(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputChannelHandshakeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tag.aas.InputChannelHandshakeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InputChannelHandshakeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputChannelHandshakeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tag.aas.InputChannelHandshakeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tag.aas.InputChannelHandshakeRequest)
    MergeFrom(*source);
  }
}

void InputChannelHandshakeRequest::MergeFrom(const InputChannelHandshakeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tag.aas.InputChannelHandshakeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  available_buttons_.MergeFrom(from.available_buttons_);
}

void InputChannelHandshakeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tag.aas.InputChannelHandshakeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputChannelHandshakeRequest::CopyFrom(const InputChannelHandshakeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tag.aas.InputChannelHandshakeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputChannelHandshakeRequest::IsInitialized() const {
  return true;
}

void InputChannelHandshakeRequest::InternalSwap(InputChannelHandshakeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  available_buttons_.InternalSwap(&other->available_buttons_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputChannelHandshakeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace aas
}  // namespace tag
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tag::aas::InputChannel* Arena::CreateMaybeMessage< ::tag::aas::InputChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tag::aas::InputChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::tag::aas::InputChannelHandshakeRequest* Arena::CreateMaybeMessage< ::tag::aas::InputChannelHandshakeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tag::aas::InputChannelHandshakeRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
