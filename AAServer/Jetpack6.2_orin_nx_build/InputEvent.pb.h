// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: InputEvent.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_InputEvent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_InputEvent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "TouchEvent.pb.h"
#include "ButtonsEvent.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_InputEvent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_InputEvent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_InputEvent_2eproto;
namespace tag {
namespace aas {
class InputEvent;
class InputEventDefaultTypeInternal;
extern InputEventDefaultTypeInternal _InputEvent_default_instance_;
}  // namespace aas
}  // namespace tag
PROTOBUF_NAMESPACE_OPEN
template<> ::tag::aas::InputEvent* Arena::CreateMaybeMessage<::tag::aas::InputEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tag {
namespace aas {

// ===================================================================

class InputEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tag.aas.InputEvent) */ {
 public:
  inline InputEvent() : InputEvent(nullptr) {};
  virtual ~InputEvent();

  InputEvent(const InputEvent& from);
  InputEvent(InputEvent&& from) noexcept
    : InputEvent() {
    *this = ::std::move(from);
  }

  inline InputEvent& operator=(const InputEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputEvent& operator=(InputEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InputEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputEvent* internal_default_instance() {
    return reinterpret_cast<const InputEvent*>(
               &_InputEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InputEvent& a, InputEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(InputEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InputEvent* New() const final {
    return CreateMaybeMessage<InputEvent>(nullptr);
  }

  InputEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InputEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InputEvent& from);
  void MergeFrom(const InputEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tag.aas.InputEvent";
  }
  protected:
  explicit InputEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_InputEvent_2eproto);
    return ::descriptor_table_InputEvent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTouchEventFieldNumber = 3,
    kButtonsEventFieldNumber = 4,
    kTimestampFieldNumber = 1,
  };
  // optional .tag.aas.TouchEvent touch_event = 3;
  bool has_touch_event() const;
  private:
  bool _internal_has_touch_event() const;
  public:
  void clear_touch_event();
  const ::tag::aas::TouchEvent& touch_event() const;
  ::tag::aas::TouchEvent* release_touch_event();
  ::tag::aas::TouchEvent* mutable_touch_event();
  void set_allocated_touch_event(::tag::aas::TouchEvent* touch_event);
  private:
  const ::tag::aas::TouchEvent& _internal_touch_event() const;
  ::tag::aas::TouchEvent* _internal_mutable_touch_event();
  public:
  void unsafe_arena_set_allocated_touch_event(
      ::tag::aas::TouchEvent* touch_event);
  ::tag::aas::TouchEvent* unsafe_arena_release_touch_event();

  // optional .tag.aas.ButtonsEvent buttons_event = 4;
  bool has_buttons_event() const;
  private:
  bool _internal_has_buttons_event() const;
  public:
  void clear_buttons_event();
  const ::tag::aas::ButtonsEvent& buttons_event() const;
  ::tag::aas::ButtonsEvent* release_buttons_event();
  ::tag::aas::ButtonsEvent* mutable_buttons_event();
  void set_allocated_buttons_event(::tag::aas::ButtonsEvent* buttons_event);
  private:
  const ::tag::aas::ButtonsEvent& _internal_buttons_event() const;
  ::tag::aas::ButtonsEvent* _internal_mutable_buttons_event();
  public:
  void unsafe_arena_set_allocated_buttons_event(
      ::tag::aas::ButtonsEvent* buttons_event);
  ::tag::aas::ButtonsEvent* unsafe_arena_release_buttons_event();

  // optional uint64 timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:tag.aas.InputEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::tag::aas::TouchEvent* touch_event_;
  ::tag::aas::ButtonsEvent* buttons_event_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  friend struct ::TableStruct_InputEvent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InputEvent

// optional uint64 timestamp = 1;
inline bool InputEvent::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool InputEvent::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void InputEvent::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InputEvent::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InputEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:tag.aas.InputEvent.timestamp)
  return _internal_timestamp();
}
inline void InputEvent::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_ = value;
}
inline void InputEvent::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:tag.aas.InputEvent.timestamp)
}

// optional .tag.aas.TouchEvent touch_event = 3;
inline bool InputEvent::_internal_has_touch_event() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || touch_event_ != nullptr);
  return value;
}
inline bool InputEvent::has_touch_event() const {
  return _internal_has_touch_event();
}
inline const ::tag::aas::TouchEvent& InputEvent::_internal_touch_event() const {
  const ::tag::aas::TouchEvent* p = touch_event_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tag::aas::TouchEvent*>(
      &::tag::aas::_TouchEvent_default_instance_);
}
inline const ::tag::aas::TouchEvent& InputEvent::touch_event() const {
  // @@protoc_insertion_point(field_get:tag.aas.InputEvent.touch_event)
  return _internal_touch_event();
}
inline void InputEvent::unsafe_arena_set_allocated_touch_event(
    ::tag::aas::TouchEvent* touch_event) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(touch_event_);
  }
  touch_event_ = touch_event;
  if (touch_event) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tag.aas.InputEvent.touch_event)
}
inline ::tag::aas::TouchEvent* InputEvent::release_touch_event() {
  auto temp = unsafe_arena_release_touch_event();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tag::aas::TouchEvent* InputEvent::unsafe_arena_release_touch_event() {
  // @@protoc_insertion_point(field_release:tag.aas.InputEvent.touch_event)
  _has_bits_[0] &= ~0x00000001u;
  ::tag::aas::TouchEvent* temp = touch_event_;
  touch_event_ = nullptr;
  return temp;
}
inline ::tag::aas::TouchEvent* InputEvent::_internal_mutable_touch_event() {
  _has_bits_[0] |= 0x00000001u;
  if (touch_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::tag::aas::TouchEvent>(GetArena());
    touch_event_ = p;
  }
  return touch_event_;
}
inline ::tag::aas::TouchEvent* InputEvent::mutable_touch_event() {
  // @@protoc_insertion_point(field_mutable:tag.aas.InputEvent.touch_event)
  return _internal_mutable_touch_event();
}
inline void InputEvent::set_allocated_touch_event(::tag::aas::TouchEvent* touch_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(touch_event_);
  }
  if (touch_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(touch_event)->GetArena();
    if (message_arena != submessage_arena) {
      touch_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, touch_event, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  touch_event_ = touch_event;
  // @@protoc_insertion_point(field_set_allocated:tag.aas.InputEvent.touch_event)
}

// optional .tag.aas.ButtonsEvent buttons_event = 4;
inline bool InputEvent::_internal_has_buttons_event() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || buttons_event_ != nullptr);
  return value;
}
inline bool InputEvent::has_buttons_event() const {
  return _internal_has_buttons_event();
}
inline const ::tag::aas::ButtonsEvent& InputEvent::_internal_buttons_event() const {
  const ::tag::aas::ButtonsEvent* p = buttons_event_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tag::aas::ButtonsEvent*>(
      &::tag::aas::_ButtonsEvent_default_instance_);
}
inline const ::tag::aas::ButtonsEvent& InputEvent::buttons_event() const {
  // @@protoc_insertion_point(field_get:tag.aas.InputEvent.buttons_event)
  return _internal_buttons_event();
}
inline void InputEvent::unsafe_arena_set_allocated_buttons_event(
    ::tag::aas::ButtonsEvent* buttons_event) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buttons_event_);
  }
  buttons_event_ = buttons_event;
  if (buttons_event) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tag.aas.InputEvent.buttons_event)
}
inline ::tag::aas::ButtonsEvent* InputEvent::release_buttons_event() {
  auto temp = unsafe_arena_release_buttons_event();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tag::aas::ButtonsEvent* InputEvent::unsafe_arena_release_buttons_event() {
  // @@protoc_insertion_point(field_release:tag.aas.InputEvent.buttons_event)
  _has_bits_[0] &= ~0x00000002u;
  ::tag::aas::ButtonsEvent* temp = buttons_event_;
  buttons_event_ = nullptr;
  return temp;
}
inline ::tag::aas::ButtonsEvent* InputEvent::_internal_mutable_buttons_event() {
  _has_bits_[0] |= 0x00000002u;
  if (buttons_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::tag::aas::ButtonsEvent>(GetArena());
    buttons_event_ = p;
  }
  return buttons_event_;
}
inline ::tag::aas::ButtonsEvent* InputEvent::mutable_buttons_event() {
  // @@protoc_insertion_point(field_mutable:tag.aas.InputEvent.buttons_event)
  return _internal_mutable_buttons_event();
}
inline void InputEvent::set_allocated_buttons_event(::tag::aas::ButtonsEvent* buttons_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(buttons_event_);
  }
  if (buttons_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buttons_event)->GetArena();
    if (message_arena != submessage_arena) {
      buttons_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buttons_event, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  buttons_event_ = buttons_event;
  // @@protoc_insertion_point(field_set_allocated:tag.aas.InputEvent.buttons_event)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace aas
}  // namespace tag

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_InputEvent_2eproto
