// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ButtonsEvent.proto

#include "ButtonsEvent.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ButtonsEvent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ButtonEvent_ButtonsEvent_2eproto;
namespace tag {
namespace aas {
class ButtonCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ButtonCode> _instance;
} _ButtonCode_default_instance_;
class ButtonEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ButtonEvent> _instance;
} _ButtonEvent_default_instance_;
class ButtonsEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ButtonsEvent> _instance;
} _ButtonsEvent_default_instance_;
}  // namespace aas
}  // namespace tag
static void InitDefaultsscc_info_ButtonCode_ButtonsEvent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tag::aas::_ButtonCode_default_instance_;
    new (ptr) ::tag::aas::ButtonCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tag::aas::ButtonCode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ButtonCode_ButtonsEvent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ButtonCode_ButtonsEvent_2eproto}, {}};

static void InitDefaultsscc_info_ButtonEvent_ButtonsEvent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tag::aas::_ButtonEvent_default_instance_;
    new (ptr) ::tag::aas::ButtonEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tag::aas::ButtonEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ButtonEvent_ButtonsEvent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ButtonEvent_ButtonsEvent_2eproto}, {}};

static void InitDefaultsscc_info_ButtonsEvent_ButtonsEvent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tag::aas::_ButtonsEvent_default_instance_;
    new (ptr) ::tag::aas::ButtonsEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tag::aas::ButtonsEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ButtonsEvent_ButtonsEvent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ButtonsEvent_ButtonsEvent_2eproto}, {
      &scc_info_ButtonEvent_ButtonsEvent_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ButtonsEvent_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ButtonsEvent_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ButtonsEvent_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ButtonsEvent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tag::aas::ButtonCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tag::aas::ButtonEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tag::aas::ButtonEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tag::aas::ButtonEvent, scan_code_),
  PROTOBUF_FIELD_OFFSET(::tag::aas::ButtonEvent, is_pressed_),
  PROTOBUF_FIELD_OFFSET(::tag::aas::ButtonEvent, meta_),
  PROTOBUF_FIELD_OFFSET(::tag::aas::ButtonEvent, long_press_),
  0,
  2,
  1,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tag::aas::ButtonsEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tag::aas::ButtonsEvent, button_events_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tag::aas::ButtonCode)},
  { 5, 14, sizeof(::tag::aas::ButtonEvent)},
  { 18, -1, sizeof(::tag::aas::ButtonsEvent)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tag::aas::_ButtonCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tag::aas::_ButtonEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tag::aas::_ButtonsEvent_default_instance_),
};

const char descriptor_table_protodef_ButtonsEvent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022ButtonsEvent.proto\022\007tag.aas\"\211\002\n\nButton"
  "Code\"\372\001\n\004Enum\022\010\n\004NONE\020\000\022\020\n\014MICROPHONE_2\020"
  "\001\022\010\n\004MENU\020\002\022\010\n\004HOME\020\003\022\010\n\004BACK\020\004\022\t\n\005PHONE"
  "\020\005\022\014\n\010CALL_END\020\006\022\006\n\002UP\020\023\022\010\n\004DOWN\020\024\022\010\n\004LE"
  "FT\020\025\022\t\n\005RIGHT\020\026\022\t\n\005ENTER\020\027\022\r\n\tUNKNOWN_1\020"
  "B\022\020\n\014MICROPHONE_1\020T\022\017\n\013TOGGLE_PLAY\020U\022\010\n\004"
  "NEXT\020W\022\010\n\004PREV\020X\022\010\n\004PLAY\020~\022\t\n\005PAUSE\020\177\022\022\n"
  "\014SCROLL_WHEEL\020\200\200\004\"p\n\013ButtonEvent\022+\n\tscan"
  "_code\030\001 \002(\0162\030.tag.aas.ButtonCode.Enum\022\022\n"
  "\nis_pressed\030\002 \002(\010\022\014\n\004meta\030\003 \002(\r\022\022\n\nlong_"
  "press\030\004 \002(\010\";\n\014ButtonsEvent\022+\n\rbutton_ev"
  "ents\030\001 \003(\0132\024.tag.aas.ButtonEvent"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ButtonsEvent_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ButtonsEvent_2eproto_sccs[3] = {
  &scc_info_ButtonCode_ButtonsEvent_2eproto.base,
  &scc_info_ButtonEvent_ButtonsEvent_2eproto.base,
  &scc_info_ButtonsEvent_ButtonsEvent_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ButtonsEvent_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ButtonsEvent_2eproto = {
  false, false, descriptor_table_protodef_ButtonsEvent_2eproto, "ButtonsEvent.proto", 472,
  &descriptor_table_ButtonsEvent_2eproto_once, descriptor_table_ButtonsEvent_2eproto_sccs, descriptor_table_ButtonsEvent_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_ButtonsEvent_2eproto::offsets,
  file_level_metadata_ButtonsEvent_2eproto, 3, file_level_enum_descriptors_ButtonsEvent_2eproto, file_level_service_descriptors_ButtonsEvent_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ButtonsEvent_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ButtonsEvent_2eproto)), true);
namespace tag {
namespace aas {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ButtonCode_Enum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ButtonsEvent_2eproto);
  return file_level_enum_descriptors_ButtonsEvent_2eproto[0];
}
bool ButtonCode_Enum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 66:
    case 84:
    case 85:
    case 87:
    case 88:
    case 126:
    case 127:
    case 65536:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ButtonCode_Enum ButtonCode::NONE;
constexpr ButtonCode_Enum ButtonCode::MICROPHONE_2;
constexpr ButtonCode_Enum ButtonCode::MENU;
constexpr ButtonCode_Enum ButtonCode::HOME;
constexpr ButtonCode_Enum ButtonCode::BACK;
constexpr ButtonCode_Enum ButtonCode::PHONE;
constexpr ButtonCode_Enum ButtonCode::CALL_END;
constexpr ButtonCode_Enum ButtonCode::UP;
constexpr ButtonCode_Enum ButtonCode::DOWN;
constexpr ButtonCode_Enum ButtonCode::LEFT;
constexpr ButtonCode_Enum ButtonCode::RIGHT;
constexpr ButtonCode_Enum ButtonCode::ENTER;
constexpr ButtonCode_Enum ButtonCode::UNKNOWN_1;
constexpr ButtonCode_Enum ButtonCode::MICROPHONE_1;
constexpr ButtonCode_Enum ButtonCode::TOGGLE_PLAY;
constexpr ButtonCode_Enum ButtonCode::NEXT;
constexpr ButtonCode_Enum ButtonCode::PREV;
constexpr ButtonCode_Enum ButtonCode::PLAY;
constexpr ButtonCode_Enum ButtonCode::PAUSE;
constexpr ButtonCode_Enum ButtonCode::SCROLL_WHEEL;
constexpr ButtonCode_Enum ButtonCode::Enum_MIN;
constexpr ButtonCode_Enum ButtonCode::Enum_MAX;
constexpr int ButtonCode::Enum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ButtonCode::InitAsDefaultInstance() {
}
class ButtonCode::_Internal {
 public:
};

ButtonCode::ButtonCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tag.aas.ButtonCode)
}
ButtonCode::ButtonCode(const ButtonCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tag.aas.ButtonCode)
}

void ButtonCode::SharedCtor() {
}

ButtonCode::~ButtonCode() {
  // @@protoc_insertion_point(destructor:tag.aas.ButtonCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ButtonCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ButtonCode::ArenaDtor(void* object) {
  ButtonCode* _this = reinterpret_cast< ButtonCode* >(object);
  (void)_this;
}
void ButtonCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ButtonCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ButtonCode& ButtonCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ButtonCode_ButtonsEvent_2eproto.base);
  return *internal_default_instance();
}


void ButtonCode::Clear() {
// @@protoc_insertion_point(message_clear_start:tag.aas.ButtonCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ButtonCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ButtonCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tag.aas.ButtonCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tag.aas.ButtonCode)
  return target;
}

size_t ButtonCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tag.aas.ButtonCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ButtonCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tag.aas.ButtonCode)
  GOOGLE_DCHECK_NE(&from, this);
  const ButtonCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ButtonCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tag.aas.ButtonCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tag.aas.ButtonCode)
    MergeFrom(*source);
  }
}

void ButtonCode::MergeFrom(const ButtonCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tag.aas.ButtonCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ButtonCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tag.aas.ButtonCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ButtonCode::CopyFrom(const ButtonCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tag.aas.ButtonCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ButtonCode::IsInitialized() const {
  return true;
}

void ButtonCode::InternalSwap(ButtonCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ButtonCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ButtonEvent::InitAsDefaultInstance() {
}
class ButtonEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<ButtonEvent>()._has_bits_);
  static void set_has_scan_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_pressed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_meta(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_long_press(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

ButtonEvent::ButtonEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tag.aas.ButtonEvent)
}
ButtonEvent::ButtonEvent(const ButtonEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&scan_code_, &from.scan_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&long_press_) -
    reinterpret_cast<char*>(&scan_code_)) + sizeof(long_press_));
  // @@protoc_insertion_point(copy_constructor:tag.aas.ButtonEvent)
}

void ButtonEvent::SharedCtor() {
  ::memset(&scan_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&long_press_) -
      reinterpret_cast<char*>(&scan_code_)) + sizeof(long_press_));
}

ButtonEvent::~ButtonEvent() {
  // @@protoc_insertion_point(destructor:tag.aas.ButtonEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ButtonEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ButtonEvent::ArenaDtor(void* object) {
  ButtonEvent* _this = reinterpret_cast< ButtonEvent* >(object);
  (void)_this;
}
void ButtonEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ButtonEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ButtonEvent& ButtonEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ButtonEvent_ButtonsEvent_2eproto.base);
  return *internal_default_instance();
}


void ButtonEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:tag.aas.ButtonEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&scan_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&long_press_) -
        reinterpret_cast<char*>(&scan_code_)) + sizeof(long_press_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ButtonEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .tag.aas.ButtonCode.Enum scan_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::tag::aas::ButtonCode_Enum_IsValid(val))) {
            _internal_set_scan_code(static_cast<::tag::aas::ButtonCode_Enum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required bool is_pressed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_pressed(&has_bits);
          is_pressed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 meta = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_meta(&has_bits);
          meta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool long_press = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_long_press(&has_bits);
          long_press_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ButtonEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tag.aas.ButtonEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .tag.aas.ButtonCode.Enum scan_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_scan_code(), target);
  }

  // required bool is_pressed = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_pressed(), target);
  }

  // required uint32 meta = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_meta(), target);
  }

  // required bool long_press = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_long_press(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tag.aas.ButtonEvent)
  return target;
}

size_t ButtonEvent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tag.aas.ButtonEvent)
  size_t total_size = 0;

  if (_internal_has_scan_code()) {
    // required .tag.aas.ButtonCode.Enum scan_code = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scan_code());
  }

  if (_internal_has_meta()) {
    // required uint32 meta = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_meta());
  }

  if (_internal_has_is_pressed()) {
    // required bool is_pressed = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_long_press()) {
    // required bool long_press = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ButtonEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tag.aas.ButtonEvent)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .tag.aas.ButtonCode.Enum scan_code = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scan_code());

    // required uint32 meta = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_meta());

    // required bool is_pressed = 2;
    total_size += 1 + 1;

    // required bool long_press = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ButtonEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tag.aas.ButtonEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ButtonEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ButtonEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tag.aas.ButtonEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tag.aas.ButtonEvent)
    MergeFrom(*source);
  }
}

void ButtonEvent::MergeFrom(const ButtonEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tag.aas.ButtonEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      scan_code_ = from.scan_code_;
    }
    if (cached_has_bits & 0x00000002u) {
      meta_ = from.meta_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_pressed_ = from.is_pressed_;
    }
    if (cached_has_bits & 0x00000008u) {
      long_press_ = from.long_press_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ButtonEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tag.aas.ButtonEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ButtonEvent::CopyFrom(const ButtonEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tag.aas.ButtonEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ButtonEvent::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ButtonEvent::InternalSwap(ButtonEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ButtonEvent, long_press_)
      + sizeof(ButtonEvent::long_press_)
      - PROTOBUF_FIELD_OFFSET(ButtonEvent, scan_code_)>(
          reinterpret_cast<char*>(&scan_code_),
          reinterpret_cast<char*>(&other->scan_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ButtonEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ButtonsEvent::InitAsDefaultInstance() {
}
class ButtonsEvent::_Internal {
 public:
};

ButtonsEvent::ButtonsEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  button_events_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tag.aas.ButtonsEvent)
}
ButtonsEvent::ButtonsEvent(const ButtonsEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      button_events_(from.button_events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tag.aas.ButtonsEvent)
}

void ButtonsEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ButtonsEvent_ButtonsEvent_2eproto.base);
}

ButtonsEvent::~ButtonsEvent() {
  // @@protoc_insertion_point(destructor:tag.aas.ButtonsEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ButtonsEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ButtonsEvent::ArenaDtor(void* object) {
  ButtonsEvent* _this = reinterpret_cast< ButtonsEvent* >(object);
  (void)_this;
}
void ButtonsEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ButtonsEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ButtonsEvent& ButtonsEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ButtonsEvent_ButtonsEvent_2eproto.base);
  return *internal_default_instance();
}


void ButtonsEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:tag.aas.ButtonsEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  button_events_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ButtonsEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tag.aas.ButtonEvent button_events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_button_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ButtonsEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tag.aas.ButtonsEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tag.aas.ButtonEvent button_events = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_button_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_button_events(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tag.aas.ButtonsEvent)
  return target;
}

size_t ButtonsEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tag.aas.ButtonsEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tag.aas.ButtonEvent button_events = 1;
  total_size += 1UL * this->_internal_button_events_size();
  for (const auto& msg : this->button_events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ButtonsEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tag.aas.ButtonsEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ButtonsEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ButtonsEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tag.aas.ButtonsEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tag.aas.ButtonsEvent)
    MergeFrom(*source);
  }
}

void ButtonsEvent::MergeFrom(const ButtonsEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tag.aas.ButtonsEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  button_events_.MergeFrom(from.button_events_);
}

void ButtonsEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tag.aas.ButtonsEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ButtonsEvent::CopyFrom(const ButtonsEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tag.aas.ButtonsEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ButtonsEvent::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(button_events_)) return false;
  return true;
}

void ButtonsEvent::InternalSwap(ButtonsEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  button_events_.InternalSwap(&other->button_events_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ButtonsEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace aas
}  // namespace tag
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tag::aas::ButtonCode* Arena::CreateMaybeMessage< ::tag::aas::ButtonCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tag::aas::ButtonCode >(arena);
}
template<> PROTOBUF_NOINLINE ::tag::aas::ButtonEvent* Arena::CreateMaybeMessage< ::tag::aas::ButtonEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tag::aas::ButtonEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::tag::aas::ButtonsEvent* Arena::CreateMaybeMessage< ::tag::aas::ButtonsEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tag::aas::ButtonsEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
