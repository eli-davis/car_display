// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MediaChannel.proto

#include "MediaChannel.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_AudioConfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioConfig_AudioConfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_VideoConfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VideoConfig_VideoConfig_2eproto;
namespace tag {
namespace aas {
class MediaChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MediaChannel> _instance;
} _MediaChannel_default_instance_;
}  // namespace aas
}  // namespace tag
static void InitDefaultsscc_info_MediaChannel_MediaChannel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tag::aas::_MediaChannel_default_instance_;
    new (ptr) ::tag::aas::MediaChannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tag::aas::MediaChannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MediaChannel_MediaChannel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MediaChannel_MediaChannel_2eproto}, {
      &scc_info_AudioConfig_AudioConfig_2eproto.base,
      &scc_info_VideoConfig_VideoConfig_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_MediaChannel_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_MediaChannel_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_MediaChannel_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_MediaChannel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::tag::aas::MediaChannel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tag::aas::MediaChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tag::aas::MediaChannel, media_type_),
  PROTOBUF_FIELD_OFFSET(::tag::aas::MediaChannel, audio_type_),
  PROTOBUF_FIELD_OFFSET(::tag::aas::MediaChannel, audio_configs_),
  PROTOBUF_FIELD_OFFSET(::tag::aas::MediaChannel, video_configs_),
  0,
  1,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::tag::aas::MediaChannel)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tag::aas::_MediaChannel_default_instance_),
};

const char descriptor_table_protodef_MediaChannel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022MediaChannel.proto\022\007tag.aas\032\025MediaStre"
  "amType.proto\032\017AudioType.proto\032\021AudioConf"
  "ig.proto\032\021VideoConfig.proto\"\310\001\n\014MediaCha"
  "nnel\0221\n\nmedia_type\030\001 \002(\0162\035.tag.aas.Media"
  "StreamType.Enum\022+\n\naudio_type\030\002 \001(\0162\027.ta"
  "g.aas.AudioType.Enum\022+\n\raudio_configs\030\003 "
  "\003(\0132\024.tag.aas.AudioConfig\022+\n\rvideo_confi"
  "gs\030\004 \003(\0132\024.tag.aas.VideoConfig"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_MediaChannel_2eproto_deps[4] = {
  &::descriptor_table_AudioConfig_2eproto,
  &::descriptor_table_AudioType_2eproto,
  &::descriptor_table_MediaStreamType_2eproto,
  &::descriptor_table_VideoConfig_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_MediaChannel_2eproto_sccs[1] = {
  &scc_info_MediaChannel_MediaChannel_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_MediaChannel_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MediaChannel_2eproto = {
  false, false, descriptor_table_protodef_MediaChannel_2eproto, "MediaChannel.proto", 310,
  &descriptor_table_MediaChannel_2eproto_once, descriptor_table_MediaChannel_2eproto_sccs, descriptor_table_MediaChannel_2eproto_deps, 1, 4,
  schemas, file_default_instances, TableStruct_MediaChannel_2eproto::offsets,
  file_level_metadata_MediaChannel_2eproto, 1, file_level_enum_descriptors_MediaChannel_2eproto, file_level_service_descriptors_MediaChannel_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_MediaChannel_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_MediaChannel_2eproto)), true);
namespace tag {
namespace aas {

// ===================================================================

void MediaChannel::InitAsDefaultInstance() {
}
class MediaChannel::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaChannel>()._has_bits_);
  static void set_has_media_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_audio_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

void MediaChannel::clear_audio_configs() {
  audio_configs_.Clear();
}
void MediaChannel::clear_video_configs() {
  video_configs_.Clear();
}
MediaChannel::MediaChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  audio_configs_(arena),
  video_configs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tag.aas.MediaChannel)
}
MediaChannel::MediaChannel(const MediaChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      audio_configs_(from.audio_configs_),
      video_configs_(from.video_configs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&media_type_, &from.media_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&audio_type_) -
    reinterpret_cast<char*>(&media_type_)) + sizeof(audio_type_));
  // @@protoc_insertion_point(copy_constructor:tag.aas.MediaChannel)
}

void MediaChannel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MediaChannel_MediaChannel_2eproto.base);
  ::memset(&media_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&audio_type_) -
      reinterpret_cast<char*>(&media_type_)) + sizeof(audio_type_));
}

MediaChannel::~MediaChannel() {
  // @@protoc_insertion_point(destructor:tag.aas.MediaChannel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MediaChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MediaChannel::ArenaDtor(void* object) {
  MediaChannel* _this = reinterpret_cast< MediaChannel* >(object);
  (void)_this;
}
void MediaChannel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MediaChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MediaChannel& MediaChannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MediaChannel_MediaChannel_2eproto.base);
  return *internal_default_instance();
}


void MediaChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:tag.aas.MediaChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  audio_configs_.Clear();
  video_configs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&media_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&audio_type_) -
        reinterpret_cast<char*>(&media_type_)) + sizeof(audio_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MediaChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .tag.aas.MediaStreamType.Enum media_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::tag::aas::MediaStreamType_Enum_IsValid(val))) {
            _internal_set_media_type(static_cast<::tag::aas::MediaStreamType_Enum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .tag.aas.AudioType.Enum audio_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::tag::aas::AudioType_Enum_IsValid(val))) {
            _internal_set_audio_type(static_cast<::tag::aas::AudioType_Enum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .tag.aas.AudioConfig audio_configs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_audio_configs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .tag.aas.VideoConfig video_configs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_video_configs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MediaChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tag.aas.MediaChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .tag.aas.MediaStreamType.Enum media_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_media_type(), target);
  }

  // optional .tag.aas.AudioType.Enum audio_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_audio_type(), target);
  }

  // repeated .tag.aas.AudioConfig audio_configs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_audio_configs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_audio_configs(i), target, stream);
  }

  // repeated .tag.aas.VideoConfig video_configs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_video_configs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_video_configs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tag.aas.MediaChannel)
  return target;
}

size_t MediaChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tag.aas.MediaChannel)
  size_t total_size = 0;

  // required .tag.aas.MediaStreamType.Enum media_type = 1;
  if (_internal_has_media_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_media_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tag.aas.AudioConfig audio_configs = 3;
  total_size += 1UL * this->_internal_audio_configs_size();
  for (const auto& msg : this->audio_configs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tag.aas.VideoConfig video_configs = 4;
  total_size += 1UL * this->_internal_video_configs_size();
  for (const auto& msg : this->video_configs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .tag.aas.AudioType.Enum audio_type = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_audio_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MediaChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tag.aas.MediaChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const MediaChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MediaChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tag.aas.MediaChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tag.aas.MediaChannel)
    MergeFrom(*source);
  }
}

void MediaChannel::MergeFrom(const MediaChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tag.aas.MediaChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  audio_configs_.MergeFrom(from.audio_configs_);
  video_configs_.MergeFrom(from.video_configs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      media_type_ = from.media_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      audio_type_ = from.audio_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MediaChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tag.aas.MediaChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaChannel::CopyFrom(const MediaChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tag.aas.MediaChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaChannel::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(audio_configs_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(video_configs_)) return false;
  return true;
}

void MediaChannel::InternalSwap(MediaChannel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  audio_configs_.InternalSwap(&other->audio_configs_);
  video_configs_.InternalSwap(&other->video_configs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MediaChannel, audio_type_)
      + sizeof(MediaChannel::audio_type_)
      - PROTOBUF_FIELD_OFFSET(MediaChannel, media_type_)>(
          reinterpret_cast<char*>(&media_type_),
          reinterpret_cast<char*>(&other->media_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace aas
}  // namespace tag
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tag::aas::MediaChannel* Arena::CreateMaybeMessage< ::tag::aas::MediaChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tag::aas::MediaChannel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
