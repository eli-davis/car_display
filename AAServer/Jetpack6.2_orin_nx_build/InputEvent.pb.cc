// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: InputEvent.proto

#include "InputEvent.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ButtonsEvent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ButtonsEvent_ButtonsEvent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TouchEvent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TouchEvent_TouchEvent_2eproto;
namespace tag {
namespace aas {
class InputEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputEvent> _instance;
} _InputEvent_default_instance_;
}  // namespace aas
}  // namespace tag
static void InitDefaultsscc_info_InputEvent_InputEvent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tag::aas::_InputEvent_default_instance_;
    new (ptr) ::tag::aas::InputEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tag::aas::InputEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InputEvent_InputEvent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InputEvent_InputEvent_2eproto}, {
      &scc_info_TouchEvent_TouchEvent_2eproto.base,
      &scc_info_ButtonsEvent_ButtonsEvent_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_InputEvent_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_InputEvent_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_InputEvent_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_InputEvent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::tag::aas::InputEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tag::aas::InputEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tag::aas::InputEvent, timestamp_),
  PROTOBUF_FIELD_OFFSET(::tag::aas::InputEvent, touch_event_),
  PROTOBUF_FIELD_OFFSET(::tag::aas::InputEvent, buttons_event_),
  2,
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::tag::aas::InputEvent)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tag::aas::_InputEvent_default_instance_),
};

const char descriptor_table_protodef_InputEvent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020InputEvent.proto\022\007tag.aas\032\020TouchEvent."
  "proto\032\022ButtonsEvent.proto\"w\n\nInputEvent\022"
  "\021\n\ttimestamp\030\001 \001(\004\022(\n\013touch_event\030\003 \001(\0132"
  "\023.tag.aas.TouchEvent\022,\n\rbuttons_event\030\004 "
  "\001(\0132\025.tag.aas.ButtonsEvent"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_InputEvent_2eproto_deps[2] = {
  &::descriptor_table_ButtonsEvent_2eproto,
  &::descriptor_table_TouchEvent_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_InputEvent_2eproto_sccs[1] = {
  &scc_info_InputEvent_InputEvent_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_InputEvent_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_InputEvent_2eproto = {
  false, false, descriptor_table_protodef_InputEvent_2eproto, "InputEvent.proto", 186,
  &descriptor_table_InputEvent_2eproto_once, descriptor_table_InputEvent_2eproto_sccs, descriptor_table_InputEvent_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_InputEvent_2eproto::offsets,
  file_level_metadata_InputEvent_2eproto, 1, file_level_enum_descriptors_InputEvent_2eproto, file_level_service_descriptors_InputEvent_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_InputEvent_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_InputEvent_2eproto)), true);
namespace tag {
namespace aas {

// ===================================================================

void InputEvent::InitAsDefaultInstance() {
  ::tag::aas::_InputEvent_default_instance_._instance.get_mutable()->touch_event_ = const_cast< ::tag::aas::TouchEvent*>(
      ::tag::aas::TouchEvent::internal_default_instance());
  ::tag::aas::_InputEvent_default_instance_._instance.get_mutable()->buttons_event_ = const_cast< ::tag::aas::ButtonsEvent*>(
      ::tag::aas::ButtonsEvent::internal_default_instance());
}
class InputEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<InputEvent>()._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::tag::aas::TouchEvent& touch_event(const InputEvent* msg);
  static void set_has_touch_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tag::aas::ButtonsEvent& buttons_event(const InputEvent* msg);
  static void set_has_buttons_event(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::tag::aas::TouchEvent&
InputEvent::_Internal::touch_event(const InputEvent* msg) {
  return *msg->touch_event_;
}
const ::tag::aas::ButtonsEvent&
InputEvent::_Internal::buttons_event(const InputEvent* msg) {
  return *msg->buttons_event_;
}
void InputEvent::clear_touch_event() {
  if (touch_event_ != nullptr) touch_event_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void InputEvent::clear_buttons_event() {
  if (buttons_event_ != nullptr) buttons_event_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
InputEvent::InputEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tag.aas.InputEvent)
}
InputEvent::InputEvent(const InputEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_touch_event()) {
    touch_event_ = new ::tag::aas::TouchEvent(*from.touch_event_);
  } else {
    touch_event_ = nullptr;
  }
  if (from._internal_has_buttons_event()) {
    buttons_event_ = new ::tag::aas::ButtonsEvent(*from.buttons_event_);
  } else {
    buttons_event_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:tag.aas.InputEvent)
}

void InputEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputEvent_InputEvent_2eproto.base);
  ::memset(&touch_event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&touch_event_)) + sizeof(timestamp_));
}

InputEvent::~InputEvent() {
  // @@protoc_insertion_point(destructor:tag.aas.InputEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InputEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete touch_event_;
  if (this != internal_default_instance()) delete buttons_event_;
}

void InputEvent::ArenaDtor(void* object) {
  InputEvent* _this = reinterpret_cast< InputEvent* >(object);
  (void)_this;
}
void InputEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InputEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputEvent& InputEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputEvent_InputEvent_2eproto.base);
  return *internal_default_instance();
}


void InputEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:tag.aas.InputEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(touch_event_ != nullptr);
      touch_event_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(buttons_event_ != nullptr);
      buttons_event_->Clear();
    }
  }
  timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tag.aas.TouchEvent touch_event = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_touch_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tag.aas.ButtonsEvent buttons_event = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_buttons_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tag.aas.InputEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 timestamp = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // optional .tag.aas.TouchEvent touch_event = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::touch_event(this), target, stream);
  }

  // optional .tag.aas.ButtonsEvent buttons_event = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::buttons_event(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tag.aas.InputEvent)
  return target;
}

size_t InputEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tag.aas.InputEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .tag.aas.TouchEvent touch_event = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *touch_event_);
    }

    // optional .tag.aas.ButtonsEvent buttons_event = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *buttons_event_);
    }

    // optional uint64 timestamp = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_timestamp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tag.aas.InputEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const InputEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tag.aas.InputEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tag.aas.InputEvent)
    MergeFrom(*source);
  }
}

void InputEvent::MergeFrom(const InputEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tag.aas.InputEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_touch_event()->::tag::aas::TouchEvent::MergeFrom(from._internal_touch_event());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_buttons_event()->::tag::aas::ButtonsEvent::MergeFrom(from._internal_buttons_event());
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InputEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tag.aas.InputEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputEvent::CopyFrom(const InputEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tag.aas.InputEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputEvent::IsInitialized() const {
  if (_internal_has_touch_event()) {
    if (!touch_event_->IsInitialized()) return false;
  }
  if (_internal_has_buttons_event()) {
    if (!buttons_event_->IsInitialized()) return false;
  }
  return true;
}

void InputEvent::InternalSwap(InputEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InputEvent, timestamp_)
      + sizeof(InputEvent::timestamp_)
      - PROTOBUF_FIELD_OFFSET(InputEvent, touch_event_)>(
          reinterpret_cast<char*>(&touch_event_),
          reinterpret_cast<char*>(&other->touch_event_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InputEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace aas
}  // namespace tag
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tag::aas::InputEvent* Arena::CreateMaybeMessage< ::tag::aas::InputEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tag::aas::InputEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
