// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Channel.proto

#include "Channel.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_BluetoothChannel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BluetoothChannel_BluetoothChannel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_InputChannel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InputChannel_InputChannel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MediaChannel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MediaChannel_MediaChannel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MediaInputChannel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MediaInputChannel_MediaInputChannel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NavigationChannel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NavigationChannel_NavigationChannel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SensorChannel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SensorChannel_SensorChannel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Channel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnknownChannel1_Channel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Channel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnknownChannel2_Channel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_VendorExtensionChannel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VendorExtensionChannel_VendorExtensionChannel_2eproto;
namespace tag {
namespace aas {
class UnknownChannel1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnknownChannel1> _instance;
} _UnknownChannel1_default_instance_;
class UnknownChannel2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnknownChannel2> _instance;
} _UnknownChannel2_default_instance_;
class ChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Channel> _instance;
} _Channel_default_instance_;
}  // namespace aas
}  // namespace tag
static void InitDefaultsscc_info_Channel_Channel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tag::aas::_Channel_default_instance_;
    new (ptr) ::tag::aas::Channel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tag::aas::Channel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_Channel_Channel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_Channel_Channel_2eproto}, {
      &scc_info_SensorChannel_SensorChannel_2eproto.base,
      &scc_info_MediaChannel_MediaChannel_2eproto.base,
      &scc_info_InputChannel_InputChannel_2eproto.base,
      &scc_info_MediaInputChannel_MediaInputChannel_2eproto.base,
      &scc_info_BluetoothChannel_BluetoothChannel_2eproto.base,
      &scc_info_NavigationChannel_NavigationChannel_2eproto.base,
      &scc_info_UnknownChannel1_Channel_2eproto.base,
      &scc_info_VendorExtensionChannel_VendorExtensionChannel_2eproto.base,
      &scc_info_UnknownChannel2_Channel_2eproto.base,}};

static void InitDefaultsscc_info_UnknownChannel1_Channel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tag::aas::_UnknownChannel1_default_instance_;
    new (ptr) ::tag::aas::UnknownChannel1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tag::aas::UnknownChannel1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnknownChannel1_Channel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnknownChannel1_Channel_2eproto}, {}};

static void InitDefaultsscc_info_UnknownChannel2_Channel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tag::aas::_UnknownChannel2_default_instance_;
    new (ptr) ::tag::aas::UnknownChannel2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tag::aas::UnknownChannel2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnknownChannel2_Channel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnknownChannel2_Channel_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Channel_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Channel_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Channel_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Channel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tag::aas::UnknownChannel1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tag::aas::UnknownChannel2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tag::aas::Channel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tag::aas::Channel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tag::aas::Channel, channel_id_),
  PROTOBUF_FIELD_OFFSET(::tag::aas::Channel, sensor_channel_),
  PROTOBUF_FIELD_OFFSET(::tag::aas::Channel, media_channel_),
  PROTOBUF_FIELD_OFFSET(::tag::aas::Channel, input_channel_),
  PROTOBUF_FIELD_OFFSET(::tag::aas::Channel, media_input_channel_),
  PROTOBUF_FIELD_OFFSET(::tag::aas::Channel, bluetooth_channel_),
  PROTOBUF_FIELD_OFFSET(::tag::aas::Channel, navigation_channel_),
  PROTOBUF_FIELD_OFFSET(::tag::aas::Channel, unknown_channel_1_),
  PROTOBUF_FIELD_OFFSET(::tag::aas::Channel, vendor_extension_channel_),
  PROTOBUF_FIELD_OFFSET(::tag::aas::Channel, unknown_channel_2_),
  9,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tag::aas::UnknownChannel1)},
  { 5, -1, sizeof(::tag::aas::UnknownChannel2)},
  { 10, 25, sizeof(::tag::aas::Channel)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tag::aas::_UnknownChannel1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tag::aas::_UnknownChannel2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tag::aas::_Channel_default_instance_),
};

const char descriptor_table_protodef_Channel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rChannel.proto\022\007tag.aas\032\023SensorChannel."
  "proto\032\022InputChannel.proto\032\022MediaChannel."
  "proto\032\027MediaInputChannel.proto\032\026Bluetoot"
  "hChannel.proto\032\027NavigationChannel.proto\032"
  "\034VendorExtensionChannel.proto\"\021\n\017Unknown"
  "Channel1\"\021\n\017UnknownChannel2\"\375\003\n\007Channel\022"
  "\022\n\nchannel_id\030\001 \002(\r\022.\n\016sensor_channel\030\002 "
  "\001(\0132\026.tag.aas.SensorChannel\022,\n\rmedia_cha"
  "nnel\030\003 \001(\0132\025.tag.aas.MediaChannel\022,\n\rinp"
  "ut_channel\030\004 \001(\0132\025.tag.aas.InputChannel\022"
  "7\n\023media_input_channel\030\005 \001(\0132\032.tag.aas.M"
  "ediaInputChannel\0224\n\021bluetooth_channel\030\006 "
  "\001(\0132\031.tag.aas.BluetoothChannel\0226\n\022naviga"
  "tion_channel\030\010 \001(\0132\032.tag.aas.NavigationC"
  "hannel\0223\n\021unknown_channel_1\030\n \001(\0132\030.tag."
  "aas.UnknownChannel1\022A\n\030vendor_extension_"
  "channel\030\014 \001(\0132\037.tag.aas.VendorExtensionC"
  "hannel\0223\n\021unknown_channel_2\030\r \001(\0132\030.tag."
  "aas.UnknownChannel2"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Channel_2eproto_deps[7] = {
  &::descriptor_table_BluetoothChannel_2eproto,
  &::descriptor_table_InputChannel_2eproto,
  &::descriptor_table_MediaChannel_2eproto,
  &::descriptor_table_MediaInputChannel_2eproto,
  &::descriptor_table_NavigationChannel_2eproto,
  &::descriptor_table_SensorChannel_2eproto,
  &::descriptor_table_VendorExtensionChannel_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Channel_2eproto_sccs[3] = {
  &scc_info_Channel_Channel_2eproto.base,
  &scc_info_UnknownChannel1_Channel_2eproto.base,
  &scc_info_UnknownChannel2_Channel_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Channel_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Channel_2eproto = {
  false, false, descriptor_table_protodef_Channel_2eproto, "Channel.proto", 739,
  &descriptor_table_Channel_2eproto_once, descriptor_table_Channel_2eproto_sccs, descriptor_table_Channel_2eproto_deps, 3, 7,
  schemas, file_default_instances, TableStruct_Channel_2eproto::offsets,
  file_level_metadata_Channel_2eproto, 3, file_level_enum_descriptors_Channel_2eproto, file_level_service_descriptors_Channel_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Channel_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Channel_2eproto)), true);
namespace tag {
namespace aas {

// ===================================================================

void UnknownChannel1::InitAsDefaultInstance() {
}
class UnknownChannel1::_Internal {
 public:
};

UnknownChannel1::UnknownChannel1(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tag.aas.UnknownChannel1)
}
UnknownChannel1::UnknownChannel1(const UnknownChannel1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tag.aas.UnknownChannel1)
}

void UnknownChannel1::SharedCtor() {
}

UnknownChannel1::~UnknownChannel1() {
  // @@protoc_insertion_point(destructor:tag.aas.UnknownChannel1)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnknownChannel1::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnknownChannel1::ArenaDtor(void* object) {
  UnknownChannel1* _this = reinterpret_cast< UnknownChannel1* >(object);
  (void)_this;
}
void UnknownChannel1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnknownChannel1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnknownChannel1& UnknownChannel1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnknownChannel1_Channel_2eproto.base);
  return *internal_default_instance();
}


void UnknownChannel1::Clear() {
// @@protoc_insertion_point(message_clear_start:tag.aas.UnknownChannel1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnknownChannel1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnknownChannel1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tag.aas.UnknownChannel1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tag.aas.UnknownChannel1)
  return target;
}

size_t UnknownChannel1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tag.aas.UnknownChannel1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnknownChannel1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tag.aas.UnknownChannel1)
  GOOGLE_DCHECK_NE(&from, this);
  const UnknownChannel1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnknownChannel1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tag.aas.UnknownChannel1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tag.aas.UnknownChannel1)
    MergeFrom(*source);
  }
}

void UnknownChannel1::MergeFrom(const UnknownChannel1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tag.aas.UnknownChannel1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UnknownChannel1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tag.aas.UnknownChannel1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnknownChannel1::CopyFrom(const UnknownChannel1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tag.aas.UnknownChannel1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnknownChannel1::IsInitialized() const {
  return true;
}

void UnknownChannel1::InternalSwap(UnknownChannel1* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnknownChannel1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnknownChannel2::InitAsDefaultInstance() {
}
class UnknownChannel2::_Internal {
 public:
};

UnknownChannel2::UnknownChannel2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tag.aas.UnknownChannel2)
}
UnknownChannel2::UnknownChannel2(const UnknownChannel2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tag.aas.UnknownChannel2)
}

void UnknownChannel2::SharedCtor() {
}

UnknownChannel2::~UnknownChannel2() {
  // @@protoc_insertion_point(destructor:tag.aas.UnknownChannel2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnknownChannel2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnknownChannel2::ArenaDtor(void* object) {
  UnknownChannel2* _this = reinterpret_cast< UnknownChannel2* >(object);
  (void)_this;
}
void UnknownChannel2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnknownChannel2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnknownChannel2& UnknownChannel2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnknownChannel2_Channel_2eproto.base);
  return *internal_default_instance();
}


void UnknownChannel2::Clear() {
// @@protoc_insertion_point(message_clear_start:tag.aas.UnknownChannel2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnknownChannel2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnknownChannel2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tag.aas.UnknownChannel2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tag.aas.UnknownChannel2)
  return target;
}

size_t UnknownChannel2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tag.aas.UnknownChannel2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnknownChannel2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tag.aas.UnknownChannel2)
  GOOGLE_DCHECK_NE(&from, this);
  const UnknownChannel2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnknownChannel2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tag.aas.UnknownChannel2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tag.aas.UnknownChannel2)
    MergeFrom(*source);
  }
}

void UnknownChannel2::MergeFrom(const UnknownChannel2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tag.aas.UnknownChannel2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UnknownChannel2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tag.aas.UnknownChannel2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnknownChannel2::CopyFrom(const UnknownChannel2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tag.aas.UnknownChannel2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnknownChannel2::IsInitialized() const {
  return true;
}

void UnknownChannel2::InternalSwap(UnknownChannel2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnknownChannel2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Channel::InitAsDefaultInstance() {
  ::tag::aas::_Channel_default_instance_._instance.get_mutable()->sensor_channel_ = const_cast< ::tag::aas::SensorChannel*>(
      ::tag::aas::SensorChannel::internal_default_instance());
  ::tag::aas::_Channel_default_instance_._instance.get_mutable()->media_channel_ = const_cast< ::tag::aas::MediaChannel*>(
      ::tag::aas::MediaChannel::internal_default_instance());
  ::tag::aas::_Channel_default_instance_._instance.get_mutable()->input_channel_ = const_cast< ::tag::aas::InputChannel*>(
      ::tag::aas::InputChannel::internal_default_instance());
  ::tag::aas::_Channel_default_instance_._instance.get_mutable()->media_input_channel_ = const_cast< ::tag::aas::MediaInputChannel*>(
      ::tag::aas::MediaInputChannel::internal_default_instance());
  ::tag::aas::_Channel_default_instance_._instance.get_mutable()->bluetooth_channel_ = const_cast< ::tag::aas::BluetoothChannel*>(
      ::tag::aas::BluetoothChannel::internal_default_instance());
  ::tag::aas::_Channel_default_instance_._instance.get_mutable()->navigation_channel_ = const_cast< ::tag::aas::NavigationChannel*>(
      ::tag::aas::NavigationChannel::internal_default_instance());
  ::tag::aas::_Channel_default_instance_._instance.get_mutable()->unknown_channel_1_ = const_cast< ::tag::aas::UnknownChannel1*>(
      ::tag::aas::UnknownChannel1::internal_default_instance());
  ::tag::aas::_Channel_default_instance_._instance.get_mutable()->vendor_extension_channel_ = const_cast< ::tag::aas::VendorExtensionChannel*>(
      ::tag::aas::VendorExtensionChannel::internal_default_instance());
  ::tag::aas::_Channel_default_instance_._instance.get_mutable()->unknown_channel_2_ = const_cast< ::tag::aas::UnknownChannel2*>(
      ::tag::aas::UnknownChannel2::internal_default_instance());
}
class Channel::_Internal {
 public:
  using HasBits = decltype(std::declval<Channel>()._has_bits_);
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::tag::aas::SensorChannel& sensor_channel(const Channel* msg);
  static void set_has_sensor_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tag::aas::MediaChannel& media_channel(const Channel* msg);
  static void set_has_media_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tag::aas::InputChannel& input_channel(const Channel* msg);
  static void set_has_input_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::tag::aas::MediaInputChannel& media_input_channel(const Channel* msg);
  static void set_has_media_input_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::tag::aas::BluetoothChannel& bluetooth_channel(const Channel* msg);
  static void set_has_bluetooth_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::tag::aas::NavigationChannel& navigation_channel(const Channel* msg);
  static void set_has_navigation_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::tag::aas::UnknownChannel1& unknown_channel_1(const Channel* msg);
  static void set_has_unknown_channel_1(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::tag::aas::VendorExtensionChannel& vendor_extension_channel(const Channel* msg);
  static void set_has_vendor_extension_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::tag::aas::UnknownChannel2& unknown_channel_2(const Channel* msg);
  static void set_has_unknown_channel_2(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000200) ^ 0x00000200) != 0;
  }
};

const ::tag::aas::SensorChannel&
Channel::_Internal::sensor_channel(const Channel* msg) {
  return *msg->sensor_channel_;
}
const ::tag::aas::MediaChannel&
Channel::_Internal::media_channel(const Channel* msg) {
  return *msg->media_channel_;
}
const ::tag::aas::InputChannel&
Channel::_Internal::input_channel(const Channel* msg) {
  return *msg->input_channel_;
}
const ::tag::aas::MediaInputChannel&
Channel::_Internal::media_input_channel(const Channel* msg) {
  return *msg->media_input_channel_;
}
const ::tag::aas::BluetoothChannel&
Channel::_Internal::bluetooth_channel(const Channel* msg) {
  return *msg->bluetooth_channel_;
}
const ::tag::aas::NavigationChannel&
Channel::_Internal::navigation_channel(const Channel* msg) {
  return *msg->navigation_channel_;
}
const ::tag::aas::UnknownChannel1&
Channel::_Internal::unknown_channel_1(const Channel* msg) {
  return *msg->unknown_channel_1_;
}
const ::tag::aas::VendorExtensionChannel&
Channel::_Internal::vendor_extension_channel(const Channel* msg) {
  return *msg->vendor_extension_channel_;
}
const ::tag::aas::UnknownChannel2&
Channel::_Internal::unknown_channel_2(const Channel* msg) {
  return *msg->unknown_channel_2_;
}
void Channel::clear_sensor_channel() {
  if (sensor_channel_ != nullptr) sensor_channel_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Channel::clear_media_channel() {
  if (media_channel_ != nullptr) media_channel_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Channel::clear_input_channel() {
  if (input_channel_ != nullptr) input_channel_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void Channel::clear_media_input_channel() {
  if (media_input_channel_ != nullptr) media_input_channel_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void Channel::clear_bluetooth_channel() {
  if (bluetooth_channel_ != nullptr) bluetooth_channel_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void Channel::clear_navigation_channel() {
  if (navigation_channel_ != nullptr) navigation_channel_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void Channel::clear_vendor_extension_channel() {
  if (vendor_extension_channel_ != nullptr) vendor_extension_channel_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
Channel::Channel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tag.aas.Channel)
}
Channel::Channel(const Channel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sensor_channel()) {
    sensor_channel_ = new ::tag::aas::SensorChannel(*from.sensor_channel_);
  } else {
    sensor_channel_ = nullptr;
  }
  if (from._internal_has_media_channel()) {
    media_channel_ = new ::tag::aas::MediaChannel(*from.media_channel_);
  } else {
    media_channel_ = nullptr;
  }
  if (from._internal_has_input_channel()) {
    input_channel_ = new ::tag::aas::InputChannel(*from.input_channel_);
  } else {
    input_channel_ = nullptr;
  }
  if (from._internal_has_media_input_channel()) {
    media_input_channel_ = new ::tag::aas::MediaInputChannel(*from.media_input_channel_);
  } else {
    media_input_channel_ = nullptr;
  }
  if (from._internal_has_bluetooth_channel()) {
    bluetooth_channel_ = new ::tag::aas::BluetoothChannel(*from.bluetooth_channel_);
  } else {
    bluetooth_channel_ = nullptr;
  }
  if (from._internal_has_navigation_channel()) {
    navigation_channel_ = new ::tag::aas::NavigationChannel(*from.navigation_channel_);
  } else {
    navigation_channel_ = nullptr;
  }
  if (from._internal_has_unknown_channel_1()) {
    unknown_channel_1_ = new ::tag::aas::UnknownChannel1(*from.unknown_channel_1_);
  } else {
    unknown_channel_1_ = nullptr;
  }
  if (from._internal_has_vendor_extension_channel()) {
    vendor_extension_channel_ = new ::tag::aas::VendorExtensionChannel(*from.vendor_extension_channel_);
  } else {
    vendor_extension_channel_ = nullptr;
  }
  if (from._internal_has_unknown_channel_2()) {
    unknown_channel_2_ = new ::tag::aas::UnknownChannel2(*from.unknown_channel_2_);
  } else {
    unknown_channel_2_ = nullptr;
  }
  channel_id_ = from.channel_id_;
  // @@protoc_insertion_point(copy_constructor:tag.aas.Channel)
}

void Channel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Channel_Channel_2eproto.base);
  ::memset(&sensor_channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&sensor_channel_)) + sizeof(channel_id_));
}

Channel::~Channel() {
  // @@protoc_insertion_point(destructor:tag.aas.Channel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Channel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sensor_channel_;
  if (this != internal_default_instance()) delete media_channel_;
  if (this != internal_default_instance()) delete input_channel_;
  if (this != internal_default_instance()) delete media_input_channel_;
  if (this != internal_default_instance()) delete bluetooth_channel_;
  if (this != internal_default_instance()) delete navigation_channel_;
  if (this != internal_default_instance()) delete unknown_channel_1_;
  if (this != internal_default_instance()) delete vendor_extension_channel_;
  if (this != internal_default_instance()) delete unknown_channel_2_;
}

void Channel::ArenaDtor(void* object) {
  Channel* _this = reinterpret_cast< Channel* >(object);
  (void)_this;
}
void Channel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Channel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Channel& Channel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Channel_Channel_2eproto.base);
  return *internal_default_instance();
}


void Channel::Clear() {
// @@protoc_insertion_point(message_clear_start:tag.aas.Channel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sensor_channel_ != nullptr);
      sensor_channel_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(media_channel_ != nullptr);
      media_channel_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(input_channel_ != nullptr);
      input_channel_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(media_input_channel_ != nullptr);
      media_input_channel_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(bluetooth_channel_ != nullptr);
      bluetooth_channel_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(navigation_channel_ != nullptr);
      navigation_channel_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(unknown_channel_1_ != nullptr);
      unknown_channel_1_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(vendor_extension_channel_ != nullptr);
      vendor_extension_channel_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(unknown_channel_2_ != nullptr);
    unknown_channel_2_->Clear();
  }
  channel_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Channel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_channel_id(&has_bits);
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tag.aas.SensorChannel sensor_channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sensor_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tag.aas.MediaChannel media_channel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_media_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tag.aas.InputChannel input_channel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tag.aas.MediaInputChannel media_input_channel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_media_input_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tag.aas.BluetoothChannel bluetooth_channel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_bluetooth_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tag.aas.NavigationChannel navigation_channel = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_navigation_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tag.aas.UnknownChannel1 unknown_channel_1 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_unknown_channel_1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tag.aas.VendorExtensionChannel vendor_extension_channel = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_vendor_extension_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tag.aas.UnknownChannel2 unknown_channel_2 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_unknown_channel_2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Channel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tag.aas.Channel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 channel_id = 1;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel_id(), target);
  }

  // optional .tag.aas.SensorChannel sensor_channel = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sensor_channel(this), target, stream);
  }

  // optional .tag.aas.MediaChannel media_channel = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::media_channel(this), target, stream);
  }

  // optional .tag.aas.InputChannel input_channel = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::input_channel(this), target, stream);
  }

  // optional .tag.aas.MediaInputChannel media_input_channel = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::media_input_channel(this), target, stream);
  }

  // optional .tag.aas.BluetoothChannel bluetooth_channel = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::bluetooth_channel(this), target, stream);
  }

  // optional .tag.aas.NavigationChannel navigation_channel = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::navigation_channel(this), target, stream);
  }

  // optional .tag.aas.UnknownChannel1 unknown_channel_1 = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::unknown_channel_1(this), target, stream);
  }

  // optional .tag.aas.VendorExtensionChannel vendor_extension_channel = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::vendor_extension_channel(this), target, stream);
  }

  // optional .tag.aas.UnknownChannel2 unknown_channel_2 = 13;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::unknown_channel_2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tag.aas.Channel)
  return target;
}

size_t Channel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tag.aas.Channel)
  size_t total_size = 0;

  // required uint32 channel_id = 1;
  if (_internal_has_channel_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_channel_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .tag.aas.SensorChannel sensor_channel = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sensor_channel_);
    }

    // optional .tag.aas.MediaChannel media_channel = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *media_channel_);
    }

    // optional .tag.aas.InputChannel input_channel = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *input_channel_);
    }

    // optional .tag.aas.MediaInputChannel media_input_channel = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *media_input_channel_);
    }

    // optional .tag.aas.BluetoothChannel bluetooth_channel = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bluetooth_channel_);
    }

    // optional .tag.aas.NavigationChannel navigation_channel = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *navigation_channel_);
    }

    // optional .tag.aas.UnknownChannel1 unknown_channel_1 = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *unknown_channel_1_);
    }

    // optional .tag.aas.VendorExtensionChannel vendor_extension_channel = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vendor_extension_channel_);
    }

  }
  // optional .tag.aas.UnknownChannel2 unknown_channel_2 = 13;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *unknown_channel_2_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Channel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tag.aas.Channel)
  GOOGLE_DCHECK_NE(&from, this);
  const Channel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Channel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tag.aas.Channel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tag.aas.Channel)
    MergeFrom(*source);
  }
}

void Channel::MergeFrom(const Channel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tag.aas.Channel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sensor_channel()->::tag::aas::SensorChannel::MergeFrom(from._internal_sensor_channel());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_media_channel()->::tag::aas::MediaChannel::MergeFrom(from._internal_media_channel());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_input_channel()->::tag::aas::InputChannel::MergeFrom(from._internal_input_channel());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_media_input_channel()->::tag::aas::MediaInputChannel::MergeFrom(from._internal_media_input_channel());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_bluetooth_channel()->::tag::aas::BluetoothChannel::MergeFrom(from._internal_bluetooth_channel());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_navigation_channel()->::tag::aas::NavigationChannel::MergeFrom(from._internal_navigation_channel());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_unknown_channel_1()->::tag::aas::UnknownChannel1::MergeFrom(from._internal_unknown_channel_1());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_vendor_extension_channel()->::tag::aas::VendorExtensionChannel::MergeFrom(from._internal_vendor_extension_channel());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_unknown_channel_2()->::tag::aas::UnknownChannel2::MergeFrom(from._internal_unknown_channel_2());
    }
    if (cached_has_bits & 0x00000200u) {
      channel_id_ = from.channel_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Channel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tag.aas.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Channel::CopyFrom(const Channel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tag.aas.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Channel::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_sensor_channel()) {
    if (!sensor_channel_->IsInitialized()) return false;
  }
  if (_internal_has_media_channel()) {
    if (!media_channel_->IsInitialized()) return false;
  }
  if (_internal_has_input_channel()) {
    if (!input_channel_->IsInitialized()) return false;
  }
  if (_internal_has_media_input_channel()) {
    if (!media_input_channel_->IsInitialized()) return false;
  }
  if (_internal_has_bluetooth_channel()) {
    if (!bluetooth_channel_->IsInitialized()) return false;
  }
  if (_internal_has_navigation_channel()) {
    if (!navigation_channel_->IsInitialized()) return false;
  }
  if (_internal_has_vendor_extension_channel()) {
    if (!vendor_extension_channel_->IsInitialized()) return false;
  }
  return true;
}

void Channel::InternalSwap(Channel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Channel, channel_id_)
      + sizeof(Channel::channel_id_)
      - PROTOBUF_FIELD_OFFSET(Channel, sensor_channel_)>(
          reinterpret_cast<char*>(&sensor_channel_),
          reinterpret_cast<char*>(&other->sensor_channel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Channel::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace aas
}  // namespace tag
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tag::aas::UnknownChannel1* Arena::CreateMaybeMessage< ::tag::aas::UnknownChannel1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tag::aas::UnknownChannel1 >(arena);
}
template<> PROTOBUF_NOINLINE ::tag::aas::UnknownChannel2* Arena::CreateMaybeMessage< ::tag::aas::UnknownChannel2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tag::aas::UnknownChannel2 >(arena);
}
template<> PROTOBUF_NOINLINE ::tag::aas::Channel* Arena::CreateMaybeMessage< ::tag::aas::Channel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tag::aas::Channel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
