// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Channel.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Channel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Channel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "SensorChannel.pb.h"
#include "InputChannel.pb.h"
#include "MediaChannel.pb.h"
#include "MediaInputChannel.pb.h"
#include "BluetoothChannel.pb.h"
#include "NavigationChannel.pb.h"
#include "VendorExtensionChannel.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Channel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Channel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Channel_2eproto;
namespace tag {
namespace aas {
class Channel;
class ChannelDefaultTypeInternal;
extern ChannelDefaultTypeInternal _Channel_default_instance_;
class UnknownChannel1;
class UnknownChannel1DefaultTypeInternal;
extern UnknownChannel1DefaultTypeInternal _UnknownChannel1_default_instance_;
class UnknownChannel2;
class UnknownChannel2DefaultTypeInternal;
extern UnknownChannel2DefaultTypeInternal _UnknownChannel2_default_instance_;
}  // namespace aas
}  // namespace tag
PROTOBUF_NAMESPACE_OPEN
template<> ::tag::aas::Channel* Arena::CreateMaybeMessage<::tag::aas::Channel>(Arena*);
template<> ::tag::aas::UnknownChannel1* Arena::CreateMaybeMessage<::tag::aas::UnknownChannel1>(Arena*);
template<> ::tag::aas::UnknownChannel2* Arena::CreateMaybeMessage<::tag::aas::UnknownChannel2>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tag {
namespace aas {

// ===================================================================

class UnknownChannel1 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tag.aas.UnknownChannel1) */ {
 public:
  inline UnknownChannel1() : UnknownChannel1(nullptr) {};
  virtual ~UnknownChannel1();

  UnknownChannel1(const UnknownChannel1& from);
  UnknownChannel1(UnknownChannel1&& from) noexcept
    : UnknownChannel1() {
    *this = ::std::move(from);
  }

  inline UnknownChannel1& operator=(const UnknownChannel1& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnknownChannel1& operator=(UnknownChannel1&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnknownChannel1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnknownChannel1* internal_default_instance() {
    return reinterpret_cast<const UnknownChannel1*>(
               &_UnknownChannel1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UnknownChannel1& a, UnknownChannel1& b) {
    a.Swap(&b);
  }
  inline void Swap(UnknownChannel1* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnknownChannel1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnknownChannel1* New() const final {
    return CreateMaybeMessage<UnknownChannel1>(nullptr);
  }

  UnknownChannel1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnknownChannel1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnknownChannel1& from);
  void MergeFrom(const UnknownChannel1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnknownChannel1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tag.aas.UnknownChannel1";
  }
  protected:
  explicit UnknownChannel1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Channel_2eproto);
    return ::descriptor_table_Channel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tag.aas.UnknownChannel1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Channel_2eproto;
};
// -------------------------------------------------------------------

class UnknownChannel2 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tag.aas.UnknownChannel2) */ {
 public:
  inline UnknownChannel2() : UnknownChannel2(nullptr) {};
  virtual ~UnknownChannel2();

  UnknownChannel2(const UnknownChannel2& from);
  UnknownChannel2(UnknownChannel2&& from) noexcept
    : UnknownChannel2() {
    *this = ::std::move(from);
  }

  inline UnknownChannel2& operator=(const UnknownChannel2& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnknownChannel2& operator=(UnknownChannel2&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnknownChannel2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnknownChannel2* internal_default_instance() {
    return reinterpret_cast<const UnknownChannel2*>(
               &_UnknownChannel2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UnknownChannel2& a, UnknownChannel2& b) {
    a.Swap(&b);
  }
  inline void Swap(UnknownChannel2* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnknownChannel2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnknownChannel2* New() const final {
    return CreateMaybeMessage<UnknownChannel2>(nullptr);
  }

  UnknownChannel2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnknownChannel2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnknownChannel2& from);
  void MergeFrom(const UnknownChannel2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnknownChannel2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tag.aas.UnknownChannel2";
  }
  protected:
  explicit UnknownChannel2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Channel_2eproto);
    return ::descriptor_table_Channel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tag.aas.UnknownChannel2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Channel_2eproto;
};
// -------------------------------------------------------------------

class Channel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tag.aas.Channel) */ {
 public:
  inline Channel() : Channel(nullptr) {};
  virtual ~Channel();

  Channel(const Channel& from);
  Channel(Channel&& from) noexcept
    : Channel() {
    *this = ::std::move(from);
  }

  inline Channel& operator=(const Channel& from) {
    CopyFrom(from);
    return *this;
  }
  inline Channel& operator=(Channel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Channel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Channel* internal_default_instance() {
    return reinterpret_cast<const Channel*>(
               &_Channel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Channel& a, Channel& b) {
    a.Swap(&b);
  }
  inline void Swap(Channel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Channel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Channel* New() const final {
    return CreateMaybeMessage<Channel>(nullptr);
  }

  Channel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Channel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Channel& from);
  void MergeFrom(const Channel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Channel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tag.aas.Channel";
  }
  protected:
  explicit Channel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Channel_2eproto);
    return ::descriptor_table_Channel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSensorChannelFieldNumber = 2,
    kMediaChannelFieldNumber = 3,
    kInputChannelFieldNumber = 4,
    kMediaInputChannelFieldNumber = 5,
    kBluetoothChannelFieldNumber = 6,
    kNavigationChannelFieldNumber = 8,
    kUnknownChannel1FieldNumber = 10,
    kVendorExtensionChannelFieldNumber = 12,
    kUnknownChannel2FieldNumber = 13,
    kChannelIdFieldNumber = 1,
  };
  // optional .tag.aas.SensorChannel sensor_channel = 2;
  bool has_sensor_channel() const;
  private:
  bool _internal_has_sensor_channel() const;
  public:
  void clear_sensor_channel();
  const ::tag::aas::SensorChannel& sensor_channel() const;
  ::tag::aas::SensorChannel* release_sensor_channel();
  ::tag::aas::SensorChannel* mutable_sensor_channel();
  void set_allocated_sensor_channel(::tag::aas::SensorChannel* sensor_channel);
  private:
  const ::tag::aas::SensorChannel& _internal_sensor_channel() const;
  ::tag::aas::SensorChannel* _internal_mutable_sensor_channel();
  public:
  void unsafe_arena_set_allocated_sensor_channel(
      ::tag::aas::SensorChannel* sensor_channel);
  ::tag::aas::SensorChannel* unsafe_arena_release_sensor_channel();

  // optional .tag.aas.MediaChannel media_channel = 3;
  bool has_media_channel() const;
  private:
  bool _internal_has_media_channel() const;
  public:
  void clear_media_channel();
  const ::tag::aas::MediaChannel& media_channel() const;
  ::tag::aas::MediaChannel* release_media_channel();
  ::tag::aas::MediaChannel* mutable_media_channel();
  void set_allocated_media_channel(::tag::aas::MediaChannel* media_channel);
  private:
  const ::tag::aas::MediaChannel& _internal_media_channel() const;
  ::tag::aas::MediaChannel* _internal_mutable_media_channel();
  public:
  void unsafe_arena_set_allocated_media_channel(
      ::tag::aas::MediaChannel* media_channel);
  ::tag::aas::MediaChannel* unsafe_arena_release_media_channel();

  // optional .tag.aas.InputChannel input_channel = 4;
  bool has_input_channel() const;
  private:
  bool _internal_has_input_channel() const;
  public:
  void clear_input_channel();
  const ::tag::aas::InputChannel& input_channel() const;
  ::tag::aas::InputChannel* release_input_channel();
  ::tag::aas::InputChannel* mutable_input_channel();
  void set_allocated_input_channel(::tag::aas::InputChannel* input_channel);
  private:
  const ::tag::aas::InputChannel& _internal_input_channel() const;
  ::tag::aas::InputChannel* _internal_mutable_input_channel();
  public:
  void unsafe_arena_set_allocated_input_channel(
      ::tag::aas::InputChannel* input_channel);
  ::tag::aas::InputChannel* unsafe_arena_release_input_channel();

  // optional .tag.aas.MediaInputChannel media_input_channel = 5;
  bool has_media_input_channel() const;
  private:
  bool _internal_has_media_input_channel() const;
  public:
  void clear_media_input_channel();
  const ::tag::aas::MediaInputChannel& media_input_channel() const;
  ::tag::aas::MediaInputChannel* release_media_input_channel();
  ::tag::aas::MediaInputChannel* mutable_media_input_channel();
  void set_allocated_media_input_channel(::tag::aas::MediaInputChannel* media_input_channel);
  private:
  const ::tag::aas::MediaInputChannel& _internal_media_input_channel() const;
  ::tag::aas::MediaInputChannel* _internal_mutable_media_input_channel();
  public:
  void unsafe_arena_set_allocated_media_input_channel(
      ::tag::aas::MediaInputChannel* media_input_channel);
  ::tag::aas::MediaInputChannel* unsafe_arena_release_media_input_channel();

  // optional .tag.aas.BluetoothChannel bluetooth_channel = 6;
  bool has_bluetooth_channel() const;
  private:
  bool _internal_has_bluetooth_channel() const;
  public:
  void clear_bluetooth_channel();
  const ::tag::aas::BluetoothChannel& bluetooth_channel() const;
  ::tag::aas::BluetoothChannel* release_bluetooth_channel();
  ::tag::aas::BluetoothChannel* mutable_bluetooth_channel();
  void set_allocated_bluetooth_channel(::tag::aas::BluetoothChannel* bluetooth_channel);
  private:
  const ::tag::aas::BluetoothChannel& _internal_bluetooth_channel() const;
  ::tag::aas::BluetoothChannel* _internal_mutable_bluetooth_channel();
  public:
  void unsafe_arena_set_allocated_bluetooth_channel(
      ::tag::aas::BluetoothChannel* bluetooth_channel);
  ::tag::aas::BluetoothChannel* unsafe_arena_release_bluetooth_channel();

  // optional .tag.aas.NavigationChannel navigation_channel = 8;
  bool has_navigation_channel() const;
  private:
  bool _internal_has_navigation_channel() const;
  public:
  void clear_navigation_channel();
  const ::tag::aas::NavigationChannel& navigation_channel() const;
  ::tag::aas::NavigationChannel* release_navigation_channel();
  ::tag::aas::NavigationChannel* mutable_navigation_channel();
  void set_allocated_navigation_channel(::tag::aas::NavigationChannel* navigation_channel);
  private:
  const ::tag::aas::NavigationChannel& _internal_navigation_channel() const;
  ::tag::aas::NavigationChannel* _internal_mutable_navigation_channel();
  public:
  void unsafe_arena_set_allocated_navigation_channel(
      ::tag::aas::NavigationChannel* navigation_channel);
  ::tag::aas::NavigationChannel* unsafe_arena_release_navigation_channel();

  // optional .tag.aas.UnknownChannel1 unknown_channel_1 = 10;
  bool has_unknown_channel_1() const;
  private:
  bool _internal_has_unknown_channel_1() const;
  public:
  void clear_unknown_channel_1();
  const ::tag::aas::UnknownChannel1& unknown_channel_1() const;
  ::tag::aas::UnknownChannel1* release_unknown_channel_1();
  ::tag::aas::UnknownChannel1* mutable_unknown_channel_1();
  void set_allocated_unknown_channel_1(::tag::aas::UnknownChannel1* unknown_channel_1);
  private:
  const ::tag::aas::UnknownChannel1& _internal_unknown_channel_1() const;
  ::tag::aas::UnknownChannel1* _internal_mutable_unknown_channel_1();
  public:
  void unsafe_arena_set_allocated_unknown_channel_1(
      ::tag::aas::UnknownChannel1* unknown_channel_1);
  ::tag::aas::UnknownChannel1* unsafe_arena_release_unknown_channel_1();

  // optional .tag.aas.VendorExtensionChannel vendor_extension_channel = 12;
  bool has_vendor_extension_channel() const;
  private:
  bool _internal_has_vendor_extension_channel() const;
  public:
  void clear_vendor_extension_channel();
  const ::tag::aas::VendorExtensionChannel& vendor_extension_channel() const;
  ::tag::aas::VendorExtensionChannel* release_vendor_extension_channel();
  ::tag::aas::VendorExtensionChannel* mutable_vendor_extension_channel();
  void set_allocated_vendor_extension_channel(::tag::aas::VendorExtensionChannel* vendor_extension_channel);
  private:
  const ::tag::aas::VendorExtensionChannel& _internal_vendor_extension_channel() const;
  ::tag::aas::VendorExtensionChannel* _internal_mutable_vendor_extension_channel();
  public:
  void unsafe_arena_set_allocated_vendor_extension_channel(
      ::tag::aas::VendorExtensionChannel* vendor_extension_channel);
  ::tag::aas::VendorExtensionChannel* unsafe_arena_release_vendor_extension_channel();

  // optional .tag.aas.UnknownChannel2 unknown_channel_2 = 13;
  bool has_unknown_channel_2() const;
  private:
  bool _internal_has_unknown_channel_2() const;
  public:
  void clear_unknown_channel_2();
  const ::tag::aas::UnknownChannel2& unknown_channel_2() const;
  ::tag::aas::UnknownChannel2* release_unknown_channel_2();
  ::tag::aas::UnknownChannel2* mutable_unknown_channel_2();
  void set_allocated_unknown_channel_2(::tag::aas::UnknownChannel2* unknown_channel_2);
  private:
  const ::tag::aas::UnknownChannel2& _internal_unknown_channel_2() const;
  ::tag::aas::UnknownChannel2* _internal_mutable_unknown_channel_2();
  public:
  void unsafe_arena_set_allocated_unknown_channel_2(
      ::tag::aas::UnknownChannel2* unknown_channel_2);
  ::tag::aas::UnknownChannel2* unsafe_arena_release_unknown_channel_2();

  // required uint32 channel_id = 1;
  bool has_channel_id() const;
  private:
  bool _internal_has_channel_id() const;
  public:
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:tag.aas.Channel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::tag::aas::SensorChannel* sensor_channel_;
  ::tag::aas::MediaChannel* media_channel_;
  ::tag::aas::InputChannel* input_channel_;
  ::tag::aas::MediaInputChannel* media_input_channel_;
  ::tag::aas::BluetoothChannel* bluetooth_channel_;
  ::tag::aas::NavigationChannel* navigation_channel_;
  ::tag::aas::UnknownChannel1* unknown_channel_1_;
  ::tag::aas::VendorExtensionChannel* vendor_extension_channel_;
  ::tag::aas::UnknownChannel2* unknown_channel_2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_id_;
  friend struct ::TableStruct_Channel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UnknownChannel1

// -------------------------------------------------------------------

// UnknownChannel2

// -------------------------------------------------------------------

// Channel

// required uint32 channel_id = 1;
inline bool Channel::_internal_has_channel_id() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Channel::has_channel_id() const {
  return _internal_has_channel_id();
}
inline void Channel::clear_channel_id() {
  channel_id_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Channel::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Channel::channel_id() const {
  // @@protoc_insertion_point(field_get:tag.aas.Channel.channel_id)
  return _internal_channel_id();
}
inline void Channel::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  channel_id_ = value;
}
inline void Channel::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:tag.aas.Channel.channel_id)
}

// optional .tag.aas.SensorChannel sensor_channel = 2;
inline bool Channel::_internal_has_sensor_channel() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sensor_channel_ != nullptr);
  return value;
}
inline bool Channel::has_sensor_channel() const {
  return _internal_has_sensor_channel();
}
inline const ::tag::aas::SensorChannel& Channel::_internal_sensor_channel() const {
  const ::tag::aas::SensorChannel* p = sensor_channel_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tag::aas::SensorChannel*>(
      &::tag::aas::_SensorChannel_default_instance_);
}
inline const ::tag::aas::SensorChannel& Channel::sensor_channel() const {
  // @@protoc_insertion_point(field_get:tag.aas.Channel.sensor_channel)
  return _internal_sensor_channel();
}
inline void Channel::unsafe_arena_set_allocated_sensor_channel(
    ::tag::aas::SensorChannel* sensor_channel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sensor_channel_);
  }
  sensor_channel_ = sensor_channel;
  if (sensor_channel) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tag.aas.Channel.sensor_channel)
}
inline ::tag::aas::SensorChannel* Channel::release_sensor_channel() {
  auto temp = unsafe_arena_release_sensor_channel();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tag::aas::SensorChannel* Channel::unsafe_arena_release_sensor_channel() {
  // @@protoc_insertion_point(field_release:tag.aas.Channel.sensor_channel)
  _has_bits_[0] &= ~0x00000001u;
  ::tag::aas::SensorChannel* temp = sensor_channel_;
  sensor_channel_ = nullptr;
  return temp;
}
inline ::tag::aas::SensorChannel* Channel::_internal_mutable_sensor_channel() {
  _has_bits_[0] |= 0x00000001u;
  if (sensor_channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::tag::aas::SensorChannel>(GetArena());
    sensor_channel_ = p;
  }
  return sensor_channel_;
}
inline ::tag::aas::SensorChannel* Channel::mutable_sensor_channel() {
  // @@protoc_insertion_point(field_mutable:tag.aas.Channel.sensor_channel)
  return _internal_mutable_sensor_channel();
}
inline void Channel::set_allocated_sensor_channel(::tag::aas::SensorChannel* sensor_channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sensor_channel_);
  }
  if (sensor_channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sensor_channel)->GetArena();
    if (message_arena != submessage_arena) {
      sensor_channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sensor_channel, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sensor_channel_ = sensor_channel;
  // @@protoc_insertion_point(field_set_allocated:tag.aas.Channel.sensor_channel)
}

// optional .tag.aas.MediaChannel media_channel = 3;
inline bool Channel::_internal_has_media_channel() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || media_channel_ != nullptr);
  return value;
}
inline bool Channel::has_media_channel() const {
  return _internal_has_media_channel();
}
inline const ::tag::aas::MediaChannel& Channel::_internal_media_channel() const {
  const ::tag::aas::MediaChannel* p = media_channel_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tag::aas::MediaChannel*>(
      &::tag::aas::_MediaChannel_default_instance_);
}
inline const ::tag::aas::MediaChannel& Channel::media_channel() const {
  // @@protoc_insertion_point(field_get:tag.aas.Channel.media_channel)
  return _internal_media_channel();
}
inline void Channel::unsafe_arena_set_allocated_media_channel(
    ::tag::aas::MediaChannel* media_channel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(media_channel_);
  }
  media_channel_ = media_channel;
  if (media_channel) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tag.aas.Channel.media_channel)
}
inline ::tag::aas::MediaChannel* Channel::release_media_channel() {
  auto temp = unsafe_arena_release_media_channel();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tag::aas::MediaChannel* Channel::unsafe_arena_release_media_channel() {
  // @@protoc_insertion_point(field_release:tag.aas.Channel.media_channel)
  _has_bits_[0] &= ~0x00000002u;
  ::tag::aas::MediaChannel* temp = media_channel_;
  media_channel_ = nullptr;
  return temp;
}
inline ::tag::aas::MediaChannel* Channel::_internal_mutable_media_channel() {
  _has_bits_[0] |= 0x00000002u;
  if (media_channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::tag::aas::MediaChannel>(GetArena());
    media_channel_ = p;
  }
  return media_channel_;
}
inline ::tag::aas::MediaChannel* Channel::mutable_media_channel() {
  // @@protoc_insertion_point(field_mutable:tag.aas.Channel.media_channel)
  return _internal_mutable_media_channel();
}
inline void Channel::set_allocated_media_channel(::tag::aas::MediaChannel* media_channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(media_channel_);
  }
  if (media_channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(media_channel)->GetArena();
    if (message_arena != submessage_arena) {
      media_channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, media_channel, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  media_channel_ = media_channel;
  // @@protoc_insertion_point(field_set_allocated:tag.aas.Channel.media_channel)
}

// optional .tag.aas.InputChannel input_channel = 4;
inline bool Channel::_internal_has_input_channel() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || input_channel_ != nullptr);
  return value;
}
inline bool Channel::has_input_channel() const {
  return _internal_has_input_channel();
}
inline const ::tag::aas::InputChannel& Channel::_internal_input_channel() const {
  const ::tag::aas::InputChannel* p = input_channel_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tag::aas::InputChannel*>(
      &::tag::aas::_InputChannel_default_instance_);
}
inline const ::tag::aas::InputChannel& Channel::input_channel() const {
  // @@protoc_insertion_point(field_get:tag.aas.Channel.input_channel)
  return _internal_input_channel();
}
inline void Channel::unsafe_arena_set_allocated_input_channel(
    ::tag::aas::InputChannel* input_channel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_channel_);
  }
  input_channel_ = input_channel;
  if (input_channel) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tag.aas.Channel.input_channel)
}
inline ::tag::aas::InputChannel* Channel::release_input_channel() {
  auto temp = unsafe_arena_release_input_channel();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tag::aas::InputChannel* Channel::unsafe_arena_release_input_channel() {
  // @@protoc_insertion_point(field_release:tag.aas.Channel.input_channel)
  _has_bits_[0] &= ~0x00000004u;
  ::tag::aas::InputChannel* temp = input_channel_;
  input_channel_ = nullptr;
  return temp;
}
inline ::tag::aas::InputChannel* Channel::_internal_mutable_input_channel() {
  _has_bits_[0] |= 0x00000004u;
  if (input_channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::tag::aas::InputChannel>(GetArena());
    input_channel_ = p;
  }
  return input_channel_;
}
inline ::tag::aas::InputChannel* Channel::mutable_input_channel() {
  // @@protoc_insertion_point(field_mutable:tag.aas.Channel.input_channel)
  return _internal_mutable_input_channel();
}
inline void Channel::set_allocated_input_channel(::tag::aas::InputChannel* input_channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_channel_);
  }
  if (input_channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_channel)->GetArena();
    if (message_arena != submessage_arena) {
      input_channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_channel, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  input_channel_ = input_channel;
  // @@protoc_insertion_point(field_set_allocated:tag.aas.Channel.input_channel)
}

// optional .tag.aas.MediaInputChannel media_input_channel = 5;
inline bool Channel::_internal_has_media_input_channel() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || media_input_channel_ != nullptr);
  return value;
}
inline bool Channel::has_media_input_channel() const {
  return _internal_has_media_input_channel();
}
inline const ::tag::aas::MediaInputChannel& Channel::_internal_media_input_channel() const {
  const ::tag::aas::MediaInputChannel* p = media_input_channel_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tag::aas::MediaInputChannel*>(
      &::tag::aas::_MediaInputChannel_default_instance_);
}
inline const ::tag::aas::MediaInputChannel& Channel::media_input_channel() const {
  // @@protoc_insertion_point(field_get:tag.aas.Channel.media_input_channel)
  return _internal_media_input_channel();
}
inline void Channel::unsafe_arena_set_allocated_media_input_channel(
    ::tag::aas::MediaInputChannel* media_input_channel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(media_input_channel_);
  }
  media_input_channel_ = media_input_channel;
  if (media_input_channel) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tag.aas.Channel.media_input_channel)
}
inline ::tag::aas::MediaInputChannel* Channel::release_media_input_channel() {
  auto temp = unsafe_arena_release_media_input_channel();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tag::aas::MediaInputChannel* Channel::unsafe_arena_release_media_input_channel() {
  // @@protoc_insertion_point(field_release:tag.aas.Channel.media_input_channel)
  _has_bits_[0] &= ~0x00000008u;
  ::tag::aas::MediaInputChannel* temp = media_input_channel_;
  media_input_channel_ = nullptr;
  return temp;
}
inline ::tag::aas::MediaInputChannel* Channel::_internal_mutable_media_input_channel() {
  _has_bits_[0] |= 0x00000008u;
  if (media_input_channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::tag::aas::MediaInputChannel>(GetArena());
    media_input_channel_ = p;
  }
  return media_input_channel_;
}
inline ::tag::aas::MediaInputChannel* Channel::mutable_media_input_channel() {
  // @@protoc_insertion_point(field_mutable:tag.aas.Channel.media_input_channel)
  return _internal_mutable_media_input_channel();
}
inline void Channel::set_allocated_media_input_channel(::tag::aas::MediaInputChannel* media_input_channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(media_input_channel_);
  }
  if (media_input_channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(media_input_channel)->GetArena();
    if (message_arena != submessage_arena) {
      media_input_channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, media_input_channel, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  media_input_channel_ = media_input_channel;
  // @@protoc_insertion_point(field_set_allocated:tag.aas.Channel.media_input_channel)
}

// optional .tag.aas.BluetoothChannel bluetooth_channel = 6;
inline bool Channel::_internal_has_bluetooth_channel() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || bluetooth_channel_ != nullptr);
  return value;
}
inline bool Channel::has_bluetooth_channel() const {
  return _internal_has_bluetooth_channel();
}
inline const ::tag::aas::BluetoothChannel& Channel::_internal_bluetooth_channel() const {
  const ::tag::aas::BluetoothChannel* p = bluetooth_channel_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tag::aas::BluetoothChannel*>(
      &::tag::aas::_BluetoothChannel_default_instance_);
}
inline const ::tag::aas::BluetoothChannel& Channel::bluetooth_channel() const {
  // @@protoc_insertion_point(field_get:tag.aas.Channel.bluetooth_channel)
  return _internal_bluetooth_channel();
}
inline void Channel::unsafe_arena_set_allocated_bluetooth_channel(
    ::tag::aas::BluetoothChannel* bluetooth_channel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bluetooth_channel_);
  }
  bluetooth_channel_ = bluetooth_channel;
  if (bluetooth_channel) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tag.aas.Channel.bluetooth_channel)
}
inline ::tag::aas::BluetoothChannel* Channel::release_bluetooth_channel() {
  auto temp = unsafe_arena_release_bluetooth_channel();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tag::aas::BluetoothChannel* Channel::unsafe_arena_release_bluetooth_channel() {
  // @@protoc_insertion_point(field_release:tag.aas.Channel.bluetooth_channel)
  _has_bits_[0] &= ~0x00000010u;
  ::tag::aas::BluetoothChannel* temp = bluetooth_channel_;
  bluetooth_channel_ = nullptr;
  return temp;
}
inline ::tag::aas::BluetoothChannel* Channel::_internal_mutable_bluetooth_channel() {
  _has_bits_[0] |= 0x00000010u;
  if (bluetooth_channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::tag::aas::BluetoothChannel>(GetArena());
    bluetooth_channel_ = p;
  }
  return bluetooth_channel_;
}
inline ::tag::aas::BluetoothChannel* Channel::mutable_bluetooth_channel() {
  // @@protoc_insertion_point(field_mutable:tag.aas.Channel.bluetooth_channel)
  return _internal_mutable_bluetooth_channel();
}
inline void Channel::set_allocated_bluetooth_channel(::tag::aas::BluetoothChannel* bluetooth_channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bluetooth_channel_);
  }
  if (bluetooth_channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bluetooth_channel)->GetArena();
    if (message_arena != submessage_arena) {
      bluetooth_channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bluetooth_channel, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  bluetooth_channel_ = bluetooth_channel;
  // @@protoc_insertion_point(field_set_allocated:tag.aas.Channel.bluetooth_channel)
}

// optional .tag.aas.NavigationChannel navigation_channel = 8;
inline bool Channel::_internal_has_navigation_channel() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || navigation_channel_ != nullptr);
  return value;
}
inline bool Channel::has_navigation_channel() const {
  return _internal_has_navigation_channel();
}
inline const ::tag::aas::NavigationChannel& Channel::_internal_navigation_channel() const {
  const ::tag::aas::NavigationChannel* p = navigation_channel_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tag::aas::NavigationChannel*>(
      &::tag::aas::_NavigationChannel_default_instance_);
}
inline const ::tag::aas::NavigationChannel& Channel::navigation_channel() const {
  // @@protoc_insertion_point(field_get:tag.aas.Channel.navigation_channel)
  return _internal_navigation_channel();
}
inline void Channel::unsafe_arena_set_allocated_navigation_channel(
    ::tag::aas::NavigationChannel* navigation_channel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(navigation_channel_);
  }
  navigation_channel_ = navigation_channel;
  if (navigation_channel) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tag.aas.Channel.navigation_channel)
}
inline ::tag::aas::NavigationChannel* Channel::release_navigation_channel() {
  auto temp = unsafe_arena_release_navigation_channel();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tag::aas::NavigationChannel* Channel::unsafe_arena_release_navigation_channel() {
  // @@protoc_insertion_point(field_release:tag.aas.Channel.navigation_channel)
  _has_bits_[0] &= ~0x00000020u;
  ::tag::aas::NavigationChannel* temp = navigation_channel_;
  navigation_channel_ = nullptr;
  return temp;
}
inline ::tag::aas::NavigationChannel* Channel::_internal_mutable_navigation_channel() {
  _has_bits_[0] |= 0x00000020u;
  if (navigation_channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::tag::aas::NavigationChannel>(GetArena());
    navigation_channel_ = p;
  }
  return navigation_channel_;
}
inline ::tag::aas::NavigationChannel* Channel::mutable_navigation_channel() {
  // @@protoc_insertion_point(field_mutable:tag.aas.Channel.navigation_channel)
  return _internal_mutable_navigation_channel();
}
inline void Channel::set_allocated_navigation_channel(::tag::aas::NavigationChannel* navigation_channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(navigation_channel_);
  }
  if (navigation_channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(navigation_channel)->GetArena();
    if (message_arena != submessage_arena) {
      navigation_channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, navigation_channel, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  navigation_channel_ = navigation_channel;
  // @@protoc_insertion_point(field_set_allocated:tag.aas.Channel.navigation_channel)
}

// optional .tag.aas.UnknownChannel1 unknown_channel_1 = 10;
inline bool Channel::_internal_has_unknown_channel_1() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || unknown_channel_1_ != nullptr);
  return value;
}
inline bool Channel::has_unknown_channel_1() const {
  return _internal_has_unknown_channel_1();
}
inline void Channel::clear_unknown_channel_1() {
  if (unknown_channel_1_ != nullptr) unknown_channel_1_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::tag::aas::UnknownChannel1& Channel::_internal_unknown_channel_1() const {
  const ::tag::aas::UnknownChannel1* p = unknown_channel_1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tag::aas::UnknownChannel1*>(
      &::tag::aas::_UnknownChannel1_default_instance_);
}
inline const ::tag::aas::UnknownChannel1& Channel::unknown_channel_1() const {
  // @@protoc_insertion_point(field_get:tag.aas.Channel.unknown_channel_1)
  return _internal_unknown_channel_1();
}
inline void Channel::unsafe_arena_set_allocated_unknown_channel_1(
    ::tag::aas::UnknownChannel1* unknown_channel_1) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unknown_channel_1_);
  }
  unknown_channel_1_ = unknown_channel_1;
  if (unknown_channel_1) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tag.aas.Channel.unknown_channel_1)
}
inline ::tag::aas::UnknownChannel1* Channel::release_unknown_channel_1() {
  auto temp = unsafe_arena_release_unknown_channel_1();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tag::aas::UnknownChannel1* Channel::unsafe_arena_release_unknown_channel_1() {
  // @@protoc_insertion_point(field_release:tag.aas.Channel.unknown_channel_1)
  _has_bits_[0] &= ~0x00000040u;
  ::tag::aas::UnknownChannel1* temp = unknown_channel_1_;
  unknown_channel_1_ = nullptr;
  return temp;
}
inline ::tag::aas::UnknownChannel1* Channel::_internal_mutable_unknown_channel_1() {
  _has_bits_[0] |= 0x00000040u;
  if (unknown_channel_1_ == nullptr) {
    auto* p = CreateMaybeMessage<::tag::aas::UnknownChannel1>(GetArena());
    unknown_channel_1_ = p;
  }
  return unknown_channel_1_;
}
inline ::tag::aas::UnknownChannel1* Channel::mutable_unknown_channel_1() {
  // @@protoc_insertion_point(field_mutable:tag.aas.Channel.unknown_channel_1)
  return _internal_mutable_unknown_channel_1();
}
inline void Channel::set_allocated_unknown_channel_1(::tag::aas::UnknownChannel1* unknown_channel_1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete unknown_channel_1_;
  }
  if (unknown_channel_1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(unknown_channel_1);
    if (message_arena != submessage_arena) {
      unknown_channel_1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unknown_channel_1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  unknown_channel_1_ = unknown_channel_1;
  // @@protoc_insertion_point(field_set_allocated:tag.aas.Channel.unknown_channel_1)
}

// optional .tag.aas.VendorExtensionChannel vendor_extension_channel = 12;
inline bool Channel::_internal_has_vendor_extension_channel() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || vendor_extension_channel_ != nullptr);
  return value;
}
inline bool Channel::has_vendor_extension_channel() const {
  return _internal_has_vendor_extension_channel();
}
inline const ::tag::aas::VendorExtensionChannel& Channel::_internal_vendor_extension_channel() const {
  const ::tag::aas::VendorExtensionChannel* p = vendor_extension_channel_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tag::aas::VendorExtensionChannel*>(
      &::tag::aas::_VendorExtensionChannel_default_instance_);
}
inline const ::tag::aas::VendorExtensionChannel& Channel::vendor_extension_channel() const {
  // @@protoc_insertion_point(field_get:tag.aas.Channel.vendor_extension_channel)
  return _internal_vendor_extension_channel();
}
inline void Channel::unsafe_arena_set_allocated_vendor_extension_channel(
    ::tag::aas::VendorExtensionChannel* vendor_extension_channel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vendor_extension_channel_);
  }
  vendor_extension_channel_ = vendor_extension_channel;
  if (vendor_extension_channel) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tag.aas.Channel.vendor_extension_channel)
}
inline ::tag::aas::VendorExtensionChannel* Channel::release_vendor_extension_channel() {
  auto temp = unsafe_arena_release_vendor_extension_channel();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tag::aas::VendorExtensionChannel* Channel::unsafe_arena_release_vendor_extension_channel() {
  // @@protoc_insertion_point(field_release:tag.aas.Channel.vendor_extension_channel)
  _has_bits_[0] &= ~0x00000080u;
  ::tag::aas::VendorExtensionChannel* temp = vendor_extension_channel_;
  vendor_extension_channel_ = nullptr;
  return temp;
}
inline ::tag::aas::VendorExtensionChannel* Channel::_internal_mutable_vendor_extension_channel() {
  _has_bits_[0] |= 0x00000080u;
  if (vendor_extension_channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::tag::aas::VendorExtensionChannel>(GetArena());
    vendor_extension_channel_ = p;
  }
  return vendor_extension_channel_;
}
inline ::tag::aas::VendorExtensionChannel* Channel::mutable_vendor_extension_channel() {
  // @@protoc_insertion_point(field_mutable:tag.aas.Channel.vendor_extension_channel)
  return _internal_mutable_vendor_extension_channel();
}
inline void Channel::set_allocated_vendor_extension_channel(::tag::aas::VendorExtensionChannel* vendor_extension_channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vendor_extension_channel_);
  }
  if (vendor_extension_channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vendor_extension_channel)->GetArena();
    if (message_arena != submessage_arena) {
      vendor_extension_channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vendor_extension_channel, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  vendor_extension_channel_ = vendor_extension_channel;
  // @@protoc_insertion_point(field_set_allocated:tag.aas.Channel.vendor_extension_channel)
}

// optional .tag.aas.UnknownChannel2 unknown_channel_2 = 13;
inline bool Channel::_internal_has_unknown_channel_2() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || unknown_channel_2_ != nullptr);
  return value;
}
inline bool Channel::has_unknown_channel_2() const {
  return _internal_has_unknown_channel_2();
}
inline void Channel::clear_unknown_channel_2() {
  if (unknown_channel_2_ != nullptr) unknown_channel_2_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::tag::aas::UnknownChannel2& Channel::_internal_unknown_channel_2() const {
  const ::tag::aas::UnknownChannel2* p = unknown_channel_2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tag::aas::UnknownChannel2*>(
      &::tag::aas::_UnknownChannel2_default_instance_);
}
inline const ::tag::aas::UnknownChannel2& Channel::unknown_channel_2() const {
  // @@protoc_insertion_point(field_get:tag.aas.Channel.unknown_channel_2)
  return _internal_unknown_channel_2();
}
inline void Channel::unsafe_arena_set_allocated_unknown_channel_2(
    ::tag::aas::UnknownChannel2* unknown_channel_2) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unknown_channel_2_);
  }
  unknown_channel_2_ = unknown_channel_2;
  if (unknown_channel_2) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tag.aas.Channel.unknown_channel_2)
}
inline ::tag::aas::UnknownChannel2* Channel::release_unknown_channel_2() {
  auto temp = unsafe_arena_release_unknown_channel_2();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tag::aas::UnknownChannel2* Channel::unsafe_arena_release_unknown_channel_2() {
  // @@protoc_insertion_point(field_release:tag.aas.Channel.unknown_channel_2)
  _has_bits_[0] &= ~0x00000100u;
  ::tag::aas::UnknownChannel2* temp = unknown_channel_2_;
  unknown_channel_2_ = nullptr;
  return temp;
}
inline ::tag::aas::UnknownChannel2* Channel::_internal_mutable_unknown_channel_2() {
  _has_bits_[0] |= 0x00000100u;
  if (unknown_channel_2_ == nullptr) {
    auto* p = CreateMaybeMessage<::tag::aas::UnknownChannel2>(GetArena());
    unknown_channel_2_ = p;
  }
  return unknown_channel_2_;
}
inline ::tag::aas::UnknownChannel2* Channel::mutable_unknown_channel_2() {
  // @@protoc_insertion_point(field_mutable:tag.aas.Channel.unknown_channel_2)
  return _internal_mutable_unknown_channel_2();
}
inline void Channel::set_allocated_unknown_channel_2(::tag::aas::UnknownChannel2* unknown_channel_2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete unknown_channel_2_;
  }
  if (unknown_channel_2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(unknown_channel_2);
    if (message_arena != submessage_arena) {
      unknown_channel_2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unknown_channel_2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  unknown_channel_2_ = unknown_channel_2;
  // @@protoc_insertion_point(field_set_allocated:tag.aas.Channel.unknown_channel_2)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace aas
}  // namespace tag

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Channel_2eproto
