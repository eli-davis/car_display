// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ButtonsEvent.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ButtonsEvent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ButtonsEvent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ButtonsEvent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ButtonsEvent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ButtonsEvent_2eproto;
namespace tag {
namespace aas {
class ButtonCode;
class ButtonCodeDefaultTypeInternal;
extern ButtonCodeDefaultTypeInternal _ButtonCode_default_instance_;
class ButtonEvent;
class ButtonEventDefaultTypeInternal;
extern ButtonEventDefaultTypeInternal _ButtonEvent_default_instance_;
class ButtonsEvent;
class ButtonsEventDefaultTypeInternal;
extern ButtonsEventDefaultTypeInternal _ButtonsEvent_default_instance_;
}  // namespace aas
}  // namespace tag
PROTOBUF_NAMESPACE_OPEN
template<> ::tag::aas::ButtonCode* Arena::CreateMaybeMessage<::tag::aas::ButtonCode>(Arena*);
template<> ::tag::aas::ButtonEvent* Arena::CreateMaybeMessage<::tag::aas::ButtonEvent>(Arena*);
template<> ::tag::aas::ButtonsEvent* Arena::CreateMaybeMessage<::tag::aas::ButtonsEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tag {
namespace aas {

enum ButtonCode_Enum : int {
  ButtonCode_Enum_NONE = 0,
  ButtonCode_Enum_MICROPHONE_2 = 1,
  ButtonCode_Enum_MENU = 2,
  ButtonCode_Enum_HOME = 3,
  ButtonCode_Enum_BACK = 4,
  ButtonCode_Enum_PHONE = 5,
  ButtonCode_Enum_CALL_END = 6,
  ButtonCode_Enum_UP = 19,
  ButtonCode_Enum_DOWN = 20,
  ButtonCode_Enum_LEFT = 21,
  ButtonCode_Enum_RIGHT = 22,
  ButtonCode_Enum_ENTER = 23,
  ButtonCode_Enum_UNKNOWN_1 = 66,
  ButtonCode_Enum_MICROPHONE_1 = 84,
  ButtonCode_Enum_TOGGLE_PLAY = 85,
  ButtonCode_Enum_NEXT = 87,
  ButtonCode_Enum_PREV = 88,
  ButtonCode_Enum_PLAY = 126,
  ButtonCode_Enum_PAUSE = 127,
  ButtonCode_Enum_SCROLL_WHEEL = 65536
};
bool ButtonCode_Enum_IsValid(int value);
constexpr ButtonCode_Enum ButtonCode_Enum_Enum_MIN = ButtonCode_Enum_NONE;
constexpr ButtonCode_Enum ButtonCode_Enum_Enum_MAX = ButtonCode_Enum_SCROLL_WHEEL;
constexpr int ButtonCode_Enum_Enum_ARRAYSIZE = ButtonCode_Enum_Enum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ButtonCode_Enum_descriptor();
template<typename T>
inline const std::string& ButtonCode_Enum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ButtonCode_Enum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ButtonCode_Enum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ButtonCode_Enum_descriptor(), enum_t_value);
}
inline bool ButtonCode_Enum_Parse(
    const std::string& name, ButtonCode_Enum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ButtonCode_Enum>(
    ButtonCode_Enum_descriptor(), name, value);
}
// ===================================================================

class ButtonCode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tag.aas.ButtonCode) */ {
 public:
  inline ButtonCode() : ButtonCode(nullptr) {};
  virtual ~ButtonCode();

  ButtonCode(const ButtonCode& from);
  ButtonCode(ButtonCode&& from) noexcept
    : ButtonCode() {
    *this = ::std::move(from);
  }

  inline ButtonCode& operator=(const ButtonCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline ButtonCode& operator=(ButtonCode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ButtonCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ButtonCode* internal_default_instance() {
    return reinterpret_cast<const ButtonCode*>(
               &_ButtonCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ButtonCode& a, ButtonCode& b) {
    a.Swap(&b);
  }
  inline void Swap(ButtonCode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ButtonCode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ButtonCode* New() const final {
    return CreateMaybeMessage<ButtonCode>(nullptr);
  }

  ButtonCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ButtonCode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ButtonCode& from);
  void MergeFrom(const ButtonCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ButtonCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tag.aas.ButtonCode";
  }
  protected:
  explicit ButtonCode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ButtonsEvent_2eproto);
    return ::descriptor_table_ButtonsEvent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ButtonCode_Enum Enum;
  static constexpr Enum NONE =
    ButtonCode_Enum_NONE;
  static constexpr Enum MICROPHONE_2 =
    ButtonCode_Enum_MICROPHONE_2;
  static constexpr Enum MENU =
    ButtonCode_Enum_MENU;
  static constexpr Enum HOME =
    ButtonCode_Enum_HOME;
  static constexpr Enum BACK =
    ButtonCode_Enum_BACK;
  static constexpr Enum PHONE =
    ButtonCode_Enum_PHONE;
  static constexpr Enum CALL_END =
    ButtonCode_Enum_CALL_END;
  static constexpr Enum UP =
    ButtonCode_Enum_UP;
  static constexpr Enum DOWN =
    ButtonCode_Enum_DOWN;
  static constexpr Enum LEFT =
    ButtonCode_Enum_LEFT;
  static constexpr Enum RIGHT =
    ButtonCode_Enum_RIGHT;
  static constexpr Enum ENTER =
    ButtonCode_Enum_ENTER;
  static constexpr Enum UNKNOWN_1 =
    ButtonCode_Enum_UNKNOWN_1;
  static constexpr Enum MICROPHONE_1 =
    ButtonCode_Enum_MICROPHONE_1;
  static constexpr Enum TOGGLE_PLAY =
    ButtonCode_Enum_TOGGLE_PLAY;
  static constexpr Enum NEXT =
    ButtonCode_Enum_NEXT;
  static constexpr Enum PREV =
    ButtonCode_Enum_PREV;
  static constexpr Enum PLAY =
    ButtonCode_Enum_PLAY;
  static constexpr Enum PAUSE =
    ButtonCode_Enum_PAUSE;
  static constexpr Enum SCROLL_WHEEL =
    ButtonCode_Enum_SCROLL_WHEEL;
  static inline bool Enum_IsValid(int value) {
    return ButtonCode_Enum_IsValid(value);
  }
  static constexpr Enum Enum_MIN =
    ButtonCode_Enum_Enum_MIN;
  static constexpr Enum Enum_MAX =
    ButtonCode_Enum_Enum_MAX;
  static constexpr int Enum_ARRAYSIZE =
    ButtonCode_Enum_Enum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Enum_descriptor() {
    return ButtonCode_Enum_descriptor();
  }
  template<typename T>
  static inline const std::string& Enum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Enum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Enum_Name.");
    return ButtonCode_Enum_Name(enum_t_value);
  }
  static inline bool Enum_Parse(const std::string& name,
      Enum* value) {
    return ButtonCode_Enum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tag.aas.ButtonCode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ButtonsEvent_2eproto;
};
// -------------------------------------------------------------------

class ButtonEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tag.aas.ButtonEvent) */ {
 public:
  inline ButtonEvent() : ButtonEvent(nullptr) {};
  virtual ~ButtonEvent();

  ButtonEvent(const ButtonEvent& from);
  ButtonEvent(ButtonEvent&& from) noexcept
    : ButtonEvent() {
    *this = ::std::move(from);
  }

  inline ButtonEvent& operator=(const ButtonEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ButtonEvent& operator=(ButtonEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ButtonEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ButtonEvent* internal_default_instance() {
    return reinterpret_cast<const ButtonEvent*>(
               &_ButtonEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ButtonEvent& a, ButtonEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ButtonEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ButtonEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ButtonEvent* New() const final {
    return CreateMaybeMessage<ButtonEvent>(nullptr);
  }

  ButtonEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ButtonEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ButtonEvent& from);
  void MergeFrom(const ButtonEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ButtonEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tag.aas.ButtonEvent";
  }
  protected:
  explicit ButtonEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ButtonsEvent_2eproto);
    return ::descriptor_table_ButtonsEvent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScanCodeFieldNumber = 1,
    kMetaFieldNumber = 3,
    kIsPressedFieldNumber = 2,
    kLongPressFieldNumber = 4,
  };
  // required .tag.aas.ButtonCode.Enum scan_code = 1;
  bool has_scan_code() const;
  private:
  bool _internal_has_scan_code() const;
  public:
  void clear_scan_code();
  ::tag::aas::ButtonCode_Enum scan_code() const;
  void set_scan_code(::tag::aas::ButtonCode_Enum value);
  private:
  ::tag::aas::ButtonCode_Enum _internal_scan_code() const;
  void _internal_set_scan_code(::tag::aas::ButtonCode_Enum value);
  public:

  // required uint32 meta = 3;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  ::PROTOBUF_NAMESPACE_ID::uint32 meta() const;
  void set_meta(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_meta() const;
  void _internal_set_meta(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required bool is_pressed = 2;
  bool has_is_pressed() const;
  private:
  bool _internal_has_is_pressed() const;
  public:
  void clear_is_pressed();
  bool is_pressed() const;
  void set_is_pressed(bool value);
  private:
  bool _internal_is_pressed() const;
  void _internal_set_is_pressed(bool value);
  public:

  // required bool long_press = 4;
  bool has_long_press() const;
  private:
  bool _internal_has_long_press() const;
  public:
  void clear_long_press();
  bool long_press() const;
  void set_long_press(bool value);
  private:
  bool _internal_long_press() const;
  void _internal_set_long_press(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tag.aas.ButtonEvent)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int scan_code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 meta_;
  bool is_pressed_;
  bool long_press_;
  friend struct ::TableStruct_ButtonsEvent_2eproto;
};
// -------------------------------------------------------------------

class ButtonsEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tag.aas.ButtonsEvent) */ {
 public:
  inline ButtonsEvent() : ButtonsEvent(nullptr) {};
  virtual ~ButtonsEvent();

  ButtonsEvent(const ButtonsEvent& from);
  ButtonsEvent(ButtonsEvent&& from) noexcept
    : ButtonsEvent() {
    *this = ::std::move(from);
  }

  inline ButtonsEvent& operator=(const ButtonsEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ButtonsEvent& operator=(ButtonsEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ButtonsEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ButtonsEvent* internal_default_instance() {
    return reinterpret_cast<const ButtonsEvent*>(
               &_ButtonsEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ButtonsEvent& a, ButtonsEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ButtonsEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ButtonsEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ButtonsEvent* New() const final {
    return CreateMaybeMessage<ButtonsEvent>(nullptr);
  }

  ButtonsEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ButtonsEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ButtonsEvent& from);
  void MergeFrom(const ButtonsEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ButtonsEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tag.aas.ButtonsEvent";
  }
  protected:
  explicit ButtonsEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ButtonsEvent_2eproto);
    return ::descriptor_table_ButtonsEvent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kButtonEventsFieldNumber = 1,
  };
  // repeated .tag.aas.ButtonEvent button_events = 1;
  int button_events_size() const;
  private:
  int _internal_button_events_size() const;
  public:
  void clear_button_events();
  ::tag::aas::ButtonEvent* mutable_button_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tag::aas::ButtonEvent >*
      mutable_button_events();
  private:
  const ::tag::aas::ButtonEvent& _internal_button_events(int index) const;
  ::tag::aas::ButtonEvent* _internal_add_button_events();
  public:
  const ::tag::aas::ButtonEvent& button_events(int index) const;
  ::tag::aas::ButtonEvent* add_button_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tag::aas::ButtonEvent >&
      button_events() const;

  // @@protoc_insertion_point(class_scope:tag.aas.ButtonsEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tag::aas::ButtonEvent > button_events_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ButtonsEvent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ButtonCode

// -------------------------------------------------------------------

// ButtonEvent

// required .tag.aas.ButtonCode.Enum scan_code = 1;
inline bool ButtonEvent::_internal_has_scan_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ButtonEvent::has_scan_code() const {
  return _internal_has_scan_code();
}
inline void ButtonEvent::clear_scan_code() {
  scan_code_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::tag::aas::ButtonCode_Enum ButtonEvent::_internal_scan_code() const {
  return static_cast< ::tag::aas::ButtonCode_Enum >(scan_code_);
}
inline ::tag::aas::ButtonCode_Enum ButtonEvent::scan_code() const {
  // @@protoc_insertion_point(field_get:tag.aas.ButtonEvent.scan_code)
  return _internal_scan_code();
}
inline void ButtonEvent::_internal_set_scan_code(::tag::aas::ButtonCode_Enum value) {
  assert(::tag::aas::ButtonCode_Enum_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  scan_code_ = value;
}
inline void ButtonEvent::set_scan_code(::tag::aas::ButtonCode_Enum value) {
  _internal_set_scan_code(value);
  // @@protoc_insertion_point(field_set:tag.aas.ButtonEvent.scan_code)
}

// required bool is_pressed = 2;
inline bool ButtonEvent::_internal_has_is_pressed() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ButtonEvent::has_is_pressed() const {
  return _internal_has_is_pressed();
}
inline void ButtonEvent::clear_is_pressed() {
  is_pressed_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ButtonEvent::_internal_is_pressed() const {
  return is_pressed_;
}
inline bool ButtonEvent::is_pressed() const {
  // @@protoc_insertion_point(field_get:tag.aas.ButtonEvent.is_pressed)
  return _internal_is_pressed();
}
inline void ButtonEvent::_internal_set_is_pressed(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_pressed_ = value;
}
inline void ButtonEvent::set_is_pressed(bool value) {
  _internal_set_is_pressed(value);
  // @@protoc_insertion_point(field_set:tag.aas.ButtonEvent.is_pressed)
}

// required uint32 meta = 3;
inline bool ButtonEvent::_internal_has_meta() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ButtonEvent::has_meta() const {
  return _internal_has_meta();
}
inline void ButtonEvent::clear_meta() {
  meta_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ButtonEvent::_internal_meta() const {
  return meta_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ButtonEvent::meta() const {
  // @@protoc_insertion_point(field_get:tag.aas.ButtonEvent.meta)
  return _internal_meta();
}
inline void ButtonEvent::_internal_set_meta(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  meta_ = value;
}
inline void ButtonEvent::set_meta(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_meta(value);
  // @@protoc_insertion_point(field_set:tag.aas.ButtonEvent.meta)
}

// required bool long_press = 4;
inline bool ButtonEvent::_internal_has_long_press() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ButtonEvent::has_long_press() const {
  return _internal_has_long_press();
}
inline void ButtonEvent::clear_long_press() {
  long_press_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ButtonEvent::_internal_long_press() const {
  return long_press_;
}
inline bool ButtonEvent::long_press() const {
  // @@protoc_insertion_point(field_get:tag.aas.ButtonEvent.long_press)
  return _internal_long_press();
}
inline void ButtonEvent::_internal_set_long_press(bool value) {
  _has_bits_[0] |= 0x00000008u;
  long_press_ = value;
}
inline void ButtonEvent::set_long_press(bool value) {
  _internal_set_long_press(value);
  // @@protoc_insertion_point(field_set:tag.aas.ButtonEvent.long_press)
}

// -------------------------------------------------------------------

// ButtonsEvent

// repeated .tag.aas.ButtonEvent button_events = 1;
inline int ButtonsEvent::_internal_button_events_size() const {
  return button_events_.size();
}
inline int ButtonsEvent::button_events_size() const {
  return _internal_button_events_size();
}
inline void ButtonsEvent::clear_button_events() {
  button_events_.Clear();
}
inline ::tag::aas::ButtonEvent* ButtonsEvent::mutable_button_events(int index) {
  // @@protoc_insertion_point(field_mutable:tag.aas.ButtonsEvent.button_events)
  return button_events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tag::aas::ButtonEvent >*
ButtonsEvent::mutable_button_events() {
  // @@protoc_insertion_point(field_mutable_list:tag.aas.ButtonsEvent.button_events)
  return &button_events_;
}
inline const ::tag::aas::ButtonEvent& ButtonsEvent::_internal_button_events(int index) const {
  return button_events_.Get(index);
}
inline const ::tag::aas::ButtonEvent& ButtonsEvent::button_events(int index) const {
  // @@protoc_insertion_point(field_get:tag.aas.ButtonsEvent.button_events)
  return _internal_button_events(index);
}
inline ::tag::aas::ButtonEvent* ButtonsEvent::_internal_add_button_events() {
  return button_events_.Add();
}
inline ::tag::aas::ButtonEvent* ButtonsEvent::add_button_events() {
  // @@protoc_insertion_point(field_add:tag.aas.ButtonsEvent.button_events)
  return _internal_add_button_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tag::aas::ButtonEvent >&
ButtonsEvent::button_events() const {
  // @@protoc_insertion_point(field_list:tag.aas.ButtonsEvent.button_events)
  return button_events_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace aas
}  // namespace tag

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tag::aas::ButtonCode_Enum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tag::aas::ButtonCode_Enum>() {
  return ::tag::aas::ButtonCode_Enum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ButtonsEvent_2eproto
