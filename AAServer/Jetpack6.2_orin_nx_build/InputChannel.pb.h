// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: InputChannel.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_InputChannel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_InputChannel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "TouchConfig.pb.h"
#include "ButtonsEvent.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_InputChannel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_InputChannel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_InputChannel_2eproto;
namespace tag {
namespace aas {
class InputChannel;
class InputChannelDefaultTypeInternal;
extern InputChannelDefaultTypeInternal _InputChannel_default_instance_;
class InputChannelHandshakeRequest;
class InputChannelHandshakeRequestDefaultTypeInternal;
extern InputChannelHandshakeRequestDefaultTypeInternal _InputChannelHandshakeRequest_default_instance_;
}  // namespace aas
}  // namespace tag
PROTOBUF_NAMESPACE_OPEN
template<> ::tag::aas::InputChannel* Arena::CreateMaybeMessage<::tag::aas::InputChannel>(Arena*);
template<> ::tag::aas::InputChannelHandshakeRequest* Arena::CreateMaybeMessage<::tag::aas::InputChannelHandshakeRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tag {
namespace aas {

// ===================================================================

class InputChannel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tag.aas.InputChannel) */ {
 public:
  inline InputChannel() : InputChannel(nullptr) {};
  virtual ~InputChannel();

  InputChannel(const InputChannel& from);
  InputChannel(InputChannel&& from) noexcept
    : InputChannel() {
    *this = ::std::move(from);
  }

  inline InputChannel& operator=(const InputChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputChannel& operator=(InputChannel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InputChannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputChannel* internal_default_instance() {
    return reinterpret_cast<const InputChannel*>(
               &_InputChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InputChannel& a, InputChannel& b) {
    a.Swap(&b);
  }
  inline void Swap(InputChannel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputChannel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InputChannel* New() const final {
    return CreateMaybeMessage<InputChannel>(nullptr);
  }

  InputChannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InputChannel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InputChannel& from);
  void MergeFrom(const InputChannel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputChannel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tag.aas.InputChannel";
  }
  protected:
  explicit InputChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_InputChannel_2eproto);
    return ::descriptor_table_InputChannel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvailableButtonsFieldNumber = 1,
    kScreenConfigFieldNumber = 2,
  };
  // repeated .tag.aas.ButtonCode.Enum available_buttons = 1;
  int available_buttons_size() const;
  private:
  int _internal_available_buttons_size() const;
  public:
  void clear_available_buttons();
  private:
  ::tag::aas::ButtonCode_Enum _internal_available_buttons(int index) const;
  void _internal_add_available_buttons(::tag::aas::ButtonCode_Enum value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_available_buttons();
  public:
  ::tag::aas::ButtonCode_Enum available_buttons(int index) const;
  void set_available_buttons(int index, ::tag::aas::ButtonCode_Enum value);
  void add_available_buttons(::tag::aas::ButtonCode_Enum value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& available_buttons() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_available_buttons();

  // optional .tag.aas.TouchConfig screen_config = 2;
  bool has_screen_config() const;
  private:
  bool _internal_has_screen_config() const;
  public:
  void clear_screen_config();
  const ::tag::aas::TouchConfig& screen_config() const;
  ::tag::aas::TouchConfig* release_screen_config();
  ::tag::aas::TouchConfig* mutable_screen_config();
  void set_allocated_screen_config(::tag::aas::TouchConfig* screen_config);
  private:
  const ::tag::aas::TouchConfig& _internal_screen_config() const;
  ::tag::aas::TouchConfig* _internal_mutable_screen_config();
  public:
  void unsafe_arena_set_allocated_screen_config(
      ::tag::aas::TouchConfig* screen_config);
  ::tag::aas::TouchConfig* unsafe_arena_release_screen_config();

  // @@protoc_insertion_point(class_scope:tag.aas.InputChannel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> available_buttons_;
  ::tag::aas::TouchConfig* screen_config_;
  friend struct ::TableStruct_InputChannel_2eproto;
};
// -------------------------------------------------------------------

class InputChannelHandshakeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tag.aas.InputChannelHandshakeRequest) */ {
 public:
  inline InputChannelHandshakeRequest() : InputChannelHandshakeRequest(nullptr) {};
  virtual ~InputChannelHandshakeRequest();

  InputChannelHandshakeRequest(const InputChannelHandshakeRequest& from);
  InputChannelHandshakeRequest(InputChannelHandshakeRequest&& from) noexcept
    : InputChannelHandshakeRequest() {
    *this = ::std::move(from);
  }

  inline InputChannelHandshakeRequest& operator=(const InputChannelHandshakeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputChannelHandshakeRequest& operator=(InputChannelHandshakeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InputChannelHandshakeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputChannelHandshakeRequest* internal_default_instance() {
    return reinterpret_cast<const InputChannelHandshakeRequest*>(
               &_InputChannelHandshakeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InputChannelHandshakeRequest& a, InputChannelHandshakeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InputChannelHandshakeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputChannelHandshakeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InputChannelHandshakeRequest* New() const final {
    return CreateMaybeMessage<InputChannelHandshakeRequest>(nullptr);
  }

  InputChannelHandshakeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InputChannelHandshakeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InputChannelHandshakeRequest& from);
  void MergeFrom(const InputChannelHandshakeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputChannelHandshakeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tag.aas.InputChannelHandshakeRequest";
  }
  protected:
  explicit InputChannelHandshakeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_InputChannel_2eproto);
    return ::descriptor_table_InputChannel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvailableButtonsFieldNumber = 1,
  };
  // repeated .tag.aas.ButtonCode.Enum available_buttons = 1;
  int available_buttons_size() const;
  private:
  int _internal_available_buttons_size() const;
  public:
  void clear_available_buttons();
  private:
  ::tag::aas::ButtonCode_Enum _internal_available_buttons(int index) const;
  void _internal_add_available_buttons(::tag::aas::ButtonCode_Enum value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_available_buttons();
  public:
  ::tag::aas::ButtonCode_Enum available_buttons(int index) const;
  void set_available_buttons(int index, ::tag::aas::ButtonCode_Enum value);
  void add_available_buttons(::tag::aas::ButtonCode_Enum value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& available_buttons() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_available_buttons();

  // @@protoc_insertion_point(class_scope:tag.aas.InputChannelHandshakeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> available_buttons_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_InputChannel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InputChannel

// repeated .tag.aas.ButtonCode.Enum available_buttons = 1;
inline int InputChannel::_internal_available_buttons_size() const {
  return available_buttons_.size();
}
inline int InputChannel::available_buttons_size() const {
  return _internal_available_buttons_size();
}
inline void InputChannel::clear_available_buttons() {
  available_buttons_.Clear();
}
inline ::tag::aas::ButtonCode_Enum InputChannel::_internal_available_buttons(int index) const {
  return static_cast< ::tag::aas::ButtonCode_Enum >(available_buttons_.Get(index));
}
inline ::tag::aas::ButtonCode_Enum InputChannel::available_buttons(int index) const {
  // @@protoc_insertion_point(field_get:tag.aas.InputChannel.available_buttons)
  return _internal_available_buttons(index);
}
inline void InputChannel::set_available_buttons(int index, ::tag::aas::ButtonCode_Enum value) {
  assert(::tag::aas::ButtonCode_Enum_IsValid(value));
  available_buttons_.Set(index, value);
  // @@protoc_insertion_point(field_set:tag.aas.InputChannel.available_buttons)
}
inline void InputChannel::_internal_add_available_buttons(::tag::aas::ButtonCode_Enum value) {
  assert(::tag::aas::ButtonCode_Enum_IsValid(value));
  available_buttons_.Add(value);
}
inline void InputChannel::add_available_buttons(::tag::aas::ButtonCode_Enum value) {
  // @@protoc_insertion_point(field_add:tag.aas.InputChannel.available_buttons)
  _internal_add_available_buttons(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
InputChannel::available_buttons() const {
  // @@protoc_insertion_point(field_list:tag.aas.InputChannel.available_buttons)
  return available_buttons_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
InputChannel::_internal_mutable_available_buttons() {
  return &available_buttons_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
InputChannel::mutable_available_buttons() {
  // @@protoc_insertion_point(field_mutable_list:tag.aas.InputChannel.available_buttons)
  return _internal_mutable_available_buttons();
}

// optional .tag.aas.TouchConfig screen_config = 2;
inline bool InputChannel::_internal_has_screen_config() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || screen_config_ != nullptr);
  return value;
}
inline bool InputChannel::has_screen_config() const {
  return _internal_has_screen_config();
}
inline const ::tag::aas::TouchConfig& InputChannel::_internal_screen_config() const {
  const ::tag::aas::TouchConfig* p = screen_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tag::aas::TouchConfig*>(
      &::tag::aas::_TouchConfig_default_instance_);
}
inline const ::tag::aas::TouchConfig& InputChannel::screen_config() const {
  // @@protoc_insertion_point(field_get:tag.aas.InputChannel.screen_config)
  return _internal_screen_config();
}
inline void InputChannel::unsafe_arena_set_allocated_screen_config(
    ::tag::aas::TouchConfig* screen_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(screen_config_);
  }
  screen_config_ = screen_config;
  if (screen_config) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tag.aas.InputChannel.screen_config)
}
inline ::tag::aas::TouchConfig* InputChannel::release_screen_config() {
  auto temp = unsafe_arena_release_screen_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tag::aas::TouchConfig* InputChannel::unsafe_arena_release_screen_config() {
  // @@protoc_insertion_point(field_release:tag.aas.InputChannel.screen_config)
  _has_bits_[0] &= ~0x00000001u;
  ::tag::aas::TouchConfig* temp = screen_config_;
  screen_config_ = nullptr;
  return temp;
}
inline ::tag::aas::TouchConfig* InputChannel::_internal_mutable_screen_config() {
  _has_bits_[0] |= 0x00000001u;
  if (screen_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::tag::aas::TouchConfig>(GetArena());
    screen_config_ = p;
  }
  return screen_config_;
}
inline ::tag::aas::TouchConfig* InputChannel::mutable_screen_config() {
  // @@protoc_insertion_point(field_mutable:tag.aas.InputChannel.screen_config)
  return _internal_mutable_screen_config();
}
inline void InputChannel::set_allocated_screen_config(::tag::aas::TouchConfig* screen_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(screen_config_);
  }
  if (screen_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(screen_config)->GetArena();
    if (message_arena != submessage_arena) {
      screen_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, screen_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  screen_config_ = screen_config;
  // @@protoc_insertion_point(field_set_allocated:tag.aas.InputChannel.screen_config)
}

// -------------------------------------------------------------------

// InputChannelHandshakeRequest

// repeated .tag.aas.ButtonCode.Enum available_buttons = 1;
inline int InputChannelHandshakeRequest::_internal_available_buttons_size() const {
  return available_buttons_.size();
}
inline int InputChannelHandshakeRequest::available_buttons_size() const {
  return _internal_available_buttons_size();
}
inline void InputChannelHandshakeRequest::clear_available_buttons() {
  available_buttons_.Clear();
}
inline ::tag::aas::ButtonCode_Enum InputChannelHandshakeRequest::_internal_available_buttons(int index) const {
  return static_cast< ::tag::aas::ButtonCode_Enum >(available_buttons_.Get(index));
}
inline ::tag::aas::ButtonCode_Enum InputChannelHandshakeRequest::available_buttons(int index) const {
  // @@protoc_insertion_point(field_get:tag.aas.InputChannelHandshakeRequest.available_buttons)
  return _internal_available_buttons(index);
}
inline void InputChannelHandshakeRequest::set_available_buttons(int index, ::tag::aas::ButtonCode_Enum value) {
  assert(::tag::aas::ButtonCode_Enum_IsValid(value));
  available_buttons_.Set(index, value);
  // @@protoc_insertion_point(field_set:tag.aas.InputChannelHandshakeRequest.available_buttons)
}
inline void InputChannelHandshakeRequest::_internal_add_available_buttons(::tag::aas::ButtonCode_Enum value) {
  assert(::tag::aas::ButtonCode_Enum_IsValid(value));
  available_buttons_.Add(value);
}
inline void InputChannelHandshakeRequest::add_available_buttons(::tag::aas::ButtonCode_Enum value) {
  // @@protoc_insertion_point(field_add:tag.aas.InputChannelHandshakeRequest.available_buttons)
  _internal_add_available_buttons(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
InputChannelHandshakeRequest::available_buttons() const {
  // @@protoc_insertion_point(field_list:tag.aas.InputChannelHandshakeRequest.available_buttons)
  return available_buttons_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
InputChannelHandshakeRequest::_internal_mutable_available_buttons() {
  return &available_buttons_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
InputChannelHandshakeRequest::mutable_available_buttons() {
  // @@protoc_insertion_point(field_mutable_list:tag.aas.InputChannelHandshakeRequest.available_buttons)
  return _internal_mutable_available_buttons();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace aas
}  // namespace tag

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_InputChannel_2eproto
