// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MediaChannel.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MediaChannel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MediaChannel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "MediaStreamType.pb.h"
#include "AudioType.pb.h"
#include "AudioConfig.pb.h"
#include "VideoConfig.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MediaChannel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MediaChannel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MediaChannel_2eproto;
namespace tag {
namespace aas {
class MediaChannel;
class MediaChannelDefaultTypeInternal;
extern MediaChannelDefaultTypeInternal _MediaChannel_default_instance_;
}  // namespace aas
}  // namespace tag
PROTOBUF_NAMESPACE_OPEN
template<> ::tag::aas::MediaChannel* Arena::CreateMaybeMessage<::tag::aas::MediaChannel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tag {
namespace aas {

// ===================================================================

class MediaChannel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tag.aas.MediaChannel) */ {
 public:
  inline MediaChannel() : MediaChannel(nullptr) {};
  virtual ~MediaChannel();

  MediaChannel(const MediaChannel& from);
  MediaChannel(MediaChannel&& from) noexcept
    : MediaChannel() {
    *this = ::std::move(from);
  }

  inline MediaChannel& operator=(const MediaChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline MediaChannel& operator=(MediaChannel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MediaChannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MediaChannel* internal_default_instance() {
    return reinterpret_cast<const MediaChannel*>(
               &_MediaChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MediaChannel& a, MediaChannel& b) {
    a.Swap(&b);
  }
  inline void Swap(MediaChannel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MediaChannel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MediaChannel* New() const final {
    return CreateMaybeMessage<MediaChannel>(nullptr);
  }

  MediaChannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MediaChannel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MediaChannel& from);
  void MergeFrom(const MediaChannel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaChannel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tag.aas.MediaChannel";
  }
  protected:
  explicit MediaChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MediaChannel_2eproto);
    return ::descriptor_table_MediaChannel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioConfigsFieldNumber = 3,
    kVideoConfigsFieldNumber = 4,
    kMediaTypeFieldNumber = 1,
    kAudioTypeFieldNumber = 2,
  };
  // repeated .tag.aas.AudioConfig audio_configs = 3;
  int audio_configs_size() const;
  private:
  int _internal_audio_configs_size() const;
  public:
  void clear_audio_configs();
  ::tag::aas::AudioConfig* mutable_audio_configs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tag::aas::AudioConfig >*
      mutable_audio_configs();
  private:
  const ::tag::aas::AudioConfig& _internal_audio_configs(int index) const;
  ::tag::aas::AudioConfig* _internal_add_audio_configs();
  public:
  const ::tag::aas::AudioConfig& audio_configs(int index) const;
  ::tag::aas::AudioConfig* add_audio_configs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tag::aas::AudioConfig >&
      audio_configs() const;

  // repeated .tag.aas.VideoConfig video_configs = 4;
  int video_configs_size() const;
  private:
  int _internal_video_configs_size() const;
  public:
  void clear_video_configs();
  ::tag::aas::VideoConfig* mutable_video_configs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tag::aas::VideoConfig >*
      mutable_video_configs();
  private:
  const ::tag::aas::VideoConfig& _internal_video_configs(int index) const;
  ::tag::aas::VideoConfig* _internal_add_video_configs();
  public:
  const ::tag::aas::VideoConfig& video_configs(int index) const;
  ::tag::aas::VideoConfig* add_video_configs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tag::aas::VideoConfig >&
      video_configs() const;

  // required .tag.aas.MediaStreamType.Enum media_type = 1;
  bool has_media_type() const;
  private:
  bool _internal_has_media_type() const;
  public:
  void clear_media_type();
  ::tag::aas::MediaStreamType_Enum media_type() const;
  void set_media_type(::tag::aas::MediaStreamType_Enum value);
  private:
  ::tag::aas::MediaStreamType_Enum _internal_media_type() const;
  void _internal_set_media_type(::tag::aas::MediaStreamType_Enum value);
  public:

  // optional .tag.aas.AudioType.Enum audio_type = 2;
  bool has_audio_type() const;
  private:
  bool _internal_has_audio_type() const;
  public:
  void clear_audio_type();
  ::tag::aas::AudioType_Enum audio_type() const;
  void set_audio_type(::tag::aas::AudioType_Enum value);
  private:
  ::tag::aas::AudioType_Enum _internal_audio_type() const;
  void _internal_set_audio_type(::tag::aas::AudioType_Enum value);
  public:

  // @@protoc_insertion_point(class_scope:tag.aas.MediaChannel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tag::aas::AudioConfig > audio_configs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tag::aas::VideoConfig > video_configs_;
  int media_type_;
  int audio_type_;
  friend struct ::TableStruct_MediaChannel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MediaChannel

// required .tag.aas.MediaStreamType.Enum media_type = 1;
inline bool MediaChannel::_internal_has_media_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MediaChannel::has_media_type() const {
  return _internal_has_media_type();
}
inline void MediaChannel::clear_media_type() {
  media_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::tag::aas::MediaStreamType_Enum MediaChannel::_internal_media_type() const {
  return static_cast< ::tag::aas::MediaStreamType_Enum >(media_type_);
}
inline ::tag::aas::MediaStreamType_Enum MediaChannel::media_type() const {
  // @@protoc_insertion_point(field_get:tag.aas.MediaChannel.media_type)
  return _internal_media_type();
}
inline void MediaChannel::_internal_set_media_type(::tag::aas::MediaStreamType_Enum value) {
  assert(::tag::aas::MediaStreamType_Enum_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  media_type_ = value;
}
inline void MediaChannel::set_media_type(::tag::aas::MediaStreamType_Enum value) {
  _internal_set_media_type(value);
  // @@protoc_insertion_point(field_set:tag.aas.MediaChannel.media_type)
}

// optional .tag.aas.AudioType.Enum audio_type = 2;
inline bool MediaChannel::_internal_has_audio_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MediaChannel::has_audio_type() const {
  return _internal_has_audio_type();
}
inline void MediaChannel::clear_audio_type() {
  audio_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::tag::aas::AudioType_Enum MediaChannel::_internal_audio_type() const {
  return static_cast< ::tag::aas::AudioType_Enum >(audio_type_);
}
inline ::tag::aas::AudioType_Enum MediaChannel::audio_type() const {
  // @@protoc_insertion_point(field_get:tag.aas.MediaChannel.audio_type)
  return _internal_audio_type();
}
inline void MediaChannel::_internal_set_audio_type(::tag::aas::AudioType_Enum value) {
  assert(::tag::aas::AudioType_Enum_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  audio_type_ = value;
}
inline void MediaChannel::set_audio_type(::tag::aas::AudioType_Enum value) {
  _internal_set_audio_type(value);
  // @@protoc_insertion_point(field_set:tag.aas.MediaChannel.audio_type)
}

// repeated .tag.aas.AudioConfig audio_configs = 3;
inline int MediaChannel::_internal_audio_configs_size() const {
  return audio_configs_.size();
}
inline int MediaChannel::audio_configs_size() const {
  return _internal_audio_configs_size();
}
inline ::tag::aas::AudioConfig* MediaChannel::mutable_audio_configs(int index) {
  // @@protoc_insertion_point(field_mutable:tag.aas.MediaChannel.audio_configs)
  return audio_configs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tag::aas::AudioConfig >*
MediaChannel::mutable_audio_configs() {
  // @@protoc_insertion_point(field_mutable_list:tag.aas.MediaChannel.audio_configs)
  return &audio_configs_;
}
inline const ::tag::aas::AudioConfig& MediaChannel::_internal_audio_configs(int index) const {
  return audio_configs_.Get(index);
}
inline const ::tag::aas::AudioConfig& MediaChannel::audio_configs(int index) const {
  // @@protoc_insertion_point(field_get:tag.aas.MediaChannel.audio_configs)
  return _internal_audio_configs(index);
}
inline ::tag::aas::AudioConfig* MediaChannel::_internal_add_audio_configs() {
  return audio_configs_.Add();
}
inline ::tag::aas::AudioConfig* MediaChannel::add_audio_configs() {
  // @@protoc_insertion_point(field_add:tag.aas.MediaChannel.audio_configs)
  return _internal_add_audio_configs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tag::aas::AudioConfig >&
MediaChannel::audio_configs() const {
  // @@protoc_insertion_point(field_list:tag.aas.MediaChannel.audio_configs)
  return audio_configs_;
}

// repeated .tag.aas.VideoConfig video_configs = 4;
inline int MediaChannel::_internal_video_configs_size() const {
  return video_configs_.size();
}
inline int MediaChannel::video_configs_size() const {
  return _internal_video_configs_size();
}
inline ::tag::aas::VideoConfig* MediaChannel::mutable_video_configs(int index) {
  // @@protoc_insertion_point(field_mutable:tag.aas.MediaChannel.video_configs)
  return video_configs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tag::aas::VideoConfig >*
MediaChannel::mutable_video_configs() {
  // @@protoc_insertion_point(field_mutable_list:tag.aas.MediaChannel.video_configs)
  return &video_configs_;
}
inline const ::tag::aas::VideoConfig& MediaChannel::_internal_video_configs(int index) const {
  return video_configs_.Get(index);
}
inline const ::tag::aas::VideoConfig& MediaChannel::video_configs(int index) const {
  // @@protoc_insertion_point(field_get:tag.aas.MediaChannel.video_configs)
  return _internal_video_configs(index);
}
inline ::tag::aas::VideoConfig* MediaChannel::_internal_add_video_configs() {
  return video_configs_.Add();
}
inline ::tag::aas::VideoConfig* MediaChannel::add_video_configs() {
  // @@protoc_insertion_point(field_add:tag.aas.MediaChannel.video_configs)
  return _internal_add_video_configs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tag::aas::VideoConfig >&
MediaChannel::video_configs() const {
  // @@protoc_insertion_point(field_list:tag.aas.MediaChannel.video_configs)
  return video_configs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace aas
}  // namespace tag

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MediaChannel_2eproto
